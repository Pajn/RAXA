{"version":3,"sources":["../../src/definitions.ts"],"names":["FIRMWARE_BLOCK_SIZE","BROADCAST_ADDRESS","NODE_SENSOR_ID","C_PRESENTATION","C_SET","C_REQ","C_INTERNAL","C_STREAM","V_TEMP","V_HUM","V_STATUS","V_PERCENTAGE","V_PRESSURE","V_FORECAST","V_RAIN","V_RAINRATE","V_WIND","V_GUST","V_DIRECTION","V_UV","V_WEIGHT","V_DISTANCE","V_IMPEDANCE","V_ARMED","V_TRIPPED","V_WATT","V_KWH","V_SCENE_ON","V_SCENE_OFF","V_HVAC_FLOW_STATE","V_HVAC_SPEED","V_LIGHT_LEVEL","V_VAR1","V_VAR2","V_VAR3","V_VAR4","V_VAR5","V_UP","V_DOWN","V_STOP","V_IR_SEND","V_IR_RECEIVE","V_FLOW","V_VOLUME","V_LOCK_STATUS","V_LEVEL","V_VOLTAGE","V_CURRENT","V_RGB","V_RGBW","V_ID","V_UNIT_PREFIX","V_HVAC_SETPOINT_COOL","V_HVAC_SETPOINT_HEAT","V_HVAC_FLOW_MODE","V_TEXT","V_CUSTOM","V_POSITION","V_IR_RECORD","V_PH","V_ORP","V_EC","V_VAR","V_VA","V_POWER_FACTOR","I_BATTERY_LEVEL","I_TIME","I_VERSION","I_ID_REQUEST","I_ID_RESPONSE","I_INCLUSION_MODE","I_CONFIG","I_FIND_PARENT","I_FIND_PARENT_RESPONSE","I_LOG_MESSAGE","I_CHILDREN","I_SKETCH_NAME","I_SKETCH_VERSION","I_REBOOT","I_GATEWAY_READY","I_SIGNING_PRESENTATION","I_NONCE_REQUEST","I_NONCE_RESPONSE","I_HEARTBEAT_REQUEST","I_PRESENTATION","I_DISCOVER_REQUEST","I_DISCOVER_RESPONSE","I_HEARTBEAT_RESPONSE","I_LOCKED","I_PING","I_PONG","I_REGISTRATION_REQUEST","I_REGISTRATION_RESPONSE","I_DEBUG","S_DOOR","S_MOTION","S_SMOKE","S_BINARY","S_DIMMER","S_COVER","S_TEMP","S_HUM","S_BARO","S_WIND","S_RAIN","S_UV","S_WEIGHT","S_POWER","S_HEATER","S_DISTANCE","S_LIGHT_LEVEL","S_ARDUINO_NODE","S_ARDUINO_REPEATER_NODE","S_LOCK","S_IR","S_WATER","S_AIR_QUALITY","S_CUSTOM","S_DUST","S_SCENE_CONTROLLER","S_RGB_LIGHT","S_RGBW_LIGHT","S_COLOR_SENSOR","S_HVAC","S_MULTIMETER","S_SPRINKLER","S_WATER_LEAK","S_SOUND","S_VIBRATION","S_MOISTURE","S_INFO","S_GAS","S_GPS","S_WATER_QUALITY","ST_FIRMWARE_CONFIG_REQUEST","ST_FIRMWARE_CONFIG_RESPONSE","ST_FIRMWARE_REQUEST","ST_FIRMWARE_RESPONSE","ST_SOUND","ST_IMAGE","P_STRING","P_BYTE","P_INT16","P_UINT16","P_LONG32","P_ULONG32","P_CUSTOM"],"mappings":"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","file":"definitions.js","sourcesContent":["export const FIRMWARE_BLOCK_SIZE = 16\nexport const BROADCAST_ADDRESS = 255\nexport const NODE_SENSOR_ID = 255\n\n/**\n * Sent by a node when they present attached sensors. This is usually done in setup() at startup.\n */\nexport const C_PRESENTATION = 0\n/**\n * This message is sent from or to a sensor when a sensor value should be updated\n */\nexport const C_SET = 1\n/**\n * Requests a variable value (usually from an actuator destined for controller).\n */\nexport const C_REQ = 2\n/**\n * This is a special internal message. See table below for the details\n */\nexport const C_INTERNAL = 3\n/**\n * Used for OTA firmware updates\n */\nexport const C_STREAM = 4\n\n/**\n * Temperature\n *\n * Used By:\n *  S_TEMP, S_HEATER, S_HVAC, S_WATER_QUALITY\n */\nexport const V_TEMP = 0\n/**\n * Humidity\n *\n * Used By:\n *  S_HUM\n */\nexport const V_HUM = 1\n/**\n * Binary status. 0=off 1=on\n *\n * Used By:\n *  S_BINARY, S_DIMMER, S_SPRINKLER, S_HVAC, S_HEATER, S_WATER_QUALITY\n */\nexport const V_STATUS = 2\n/**\n * Percentage value. 0-100 (%)\n *\n * Used By:\n *  S_DIMMER, S_COVER\n */\nexport const V_PERCENTAGE = 3\n/**\n * Atmospheric Pressure\n *\n * Used By:\n *  S_BARO\n */\nexport const V_PRESSURE = 4\n/**\n * Whether forecast. One of \"stable\", \"sunny\", \"cloudy\", \"unstable\", \"thunderstorm\" or \"unknown\"\n *\n * Used By:\n *  S_BARO\n */\nexport const V_FORECAST = 5\n/**\n * Amount of rain\n *\n * Used By:\n *  S_RAIN\n */\nexport const V_RAIN = 6\n/**\n * Rate of rain\n *\n * Used By:\n *  S_RAIN\n */\nexport const V_RAINRATE = 7\n/**\n * Windspeed\n *\n * Used By:\n *  S_WIND\n */\nexport const V_WIND = 8\n/**\n * Gust\n *\n * Used By:\n *  S_WIND\n */\nexport const V_GUST = 9\n/**\n * Wind direction 0-360 (degrees)\n *\n * Used By:\n *  S_WIND\n */\nexport const V_DIRECTION = 10\n/**\n * UV light level\n *\n * Used By:\n *  S_UV\n */\nexport const V_UV = 11\n/**\n * Weight (for scales etc)\n *\n * Used By:\n *  S_WEIGHT\n */\nexport const V_WEIGHT = 12\n/**\n * Distance\n *\n * Used By:\n *  S_DISTANCE\n */\nexport const V_DISTANCE = 13\n/**\n * Impedance value\n *\n * Used By:\n *  S_MULTIMETER, S_WEIGHT\n */\nexport const V_IMPEDANCE = 14\n/**\n * Armed status of a security sensor.\n *\n * 1=Armed, 0=Bypassed\n *\n * Used By:\n *  S_DOOR, S_MOTION, S_SMOKE, S_SPRINKLER, S_WATER_LEAK, S_SOUND, S_VIBRATION, S_MOISTURE\n */\nexport const V_ARMED = 15\n/**\n * Tripped status of a security sensor. 1=Tripped, 0=Untripped\n *\n * Used By:\n *  S_DOOR, S_MOTION, S_SMOKE, S_SPRINKLER, S_WATER_LEAK, S_SOUND, S_VIBRATION, S_MOISTURE\n */\nexport const V_TRIPPED = 16\n/**\n * Watt value for power meters\n *\n * Used By:\n *  S_POWER, S_BINARY, S_DIMMER, S_RGB_LIGHT, S_RGBW_LIGHT\n */\nexport const V_WATT = 17\n/**\n * Accumulated number of KWH for a power meter\n *\n * Used By:\n *  S_POWER\n */\nexport const V_KWH = 18\n/**\n * Turn on a scene\n *\n * Used By:\n *  S_SCENE_CONTROLLER\n */\nexport const V_SCENE_ON = 19\n/**\n * Turn of a scene\n *\n * Used By:\n *  S_SCENE_CONTROLLER\n */\nexport const V_SCENE_OFF = 20\n/**\n * Mode of header. One of \"Off\", \"HeatOn\", \"CoolOn\", or \"AutoChangeOver\"\n *\n * Used By:\n *  S_HVAC, S_HEATER\n */\nexport const V_HVAC_FLOW_STATE = 21\n/**\n * HVAC/Heater fan speed (\"Min\", \"Normal\", \"Max\", \"Auto\")\n *\n * Used By:\n *  S_HVAC, S_HEATER\n */\nexport const V_HVAC_SPEED = 22\n/**\n * Uncalibrated light level. 0-100%. Use V_LEVEL for light level in lux.\n *\n * Used By:\n *  S_LIGHT_LEVEL\n */\nexport const V_LIGHT_LEVEL = 23\n/**\n * Custom value \tAny device\n */\nexport const V_VAR1 = 24\n/**\n * Custom value \tAny device\n */\nexport const V_VAR2 = 25\n/**\n * Custom value \tAny device\n */\nexport const V_VAR3 = 26\n/**\n * Custom value \tAny device\n */\nexport const V_VAR4 = 27\n/**\n * Custom value \tAny device\n */\nexport const V_VAR5 = 28\n/**\n * Window covering. Up.\n *\n * Used By:\n *  S_COVER\n */\nexport const V_UP = 29\n/**\n * Window covering. Down.\n *\n * Used By:\n *  S_COVER\n */\nexport const V_DOWN = 30\n/**\n * Window covering. Stop.\n *\n * Used By:\n *  S_COVER\n */\nexport const V_STOP = 31\n/**\n * Send out an IR-command\n *\n * Used By:\n *  S_IR\n */\nexport const V_IR_SEND = 32\n/**\n * This message contains a received IR-command\n *\n * Used By:\n *  S_IR\n */\nexport const V_IR_RECEIVE = 33\n/**\n * Flow of water (in meter)\n *\n * Used By:\n *  S_WATER\n */\nexport const V_FLOW = 34\n/**\n * Water volume\n *\n * Used By:\n *  S_WATER\n */\nexport const V_VOLUME = 35\n/**\n * Set or get lock status. 1=Locked, 0=Unlocked\n *\n * Used By:\n *  S_LOCK\n */\nexport const V_LOCK_STATUS = 36\n/**\n * Used for sending level-value\n *\n * Used By:\n *  S_DUST, S_AIR_QUALITY, S_SOUND (dB), S_VIBRATION (hz), S_LIGHT_LEVEL (lux)\n */\nexport const V_LEVEL = 37\n/**\n * Voltage level\n *\n * Used By:\n *  S_MULTIMETER\n */\nexport const V_VOLTAGE = 38\n/**\n * Current level\n *\n * Used By:\n *  S_MULTIMETER\n */\nexport const V_CURRENT = 39\n/**\n * RGB value transmitted as ASCII hex string (I.e \"ff0000\" for red)\n *\n * Used By:\n *  S_RGB_LIGHT, S_COLOR_SENSOR\n */\nexport const V_RGB = 40\n/**\n * RGBW value transmitted as ASCII hex string (I.e \"ff0000ff\" for red + full white)\n *\n * Used By:\n *  S_RGBW_LIGHT\n */\nexport const V_RGBW = 41\n/**\n * Optional unique sensor id (e.g. OneWire DS1820b ids)\n *\n * Used By:\n *  S_TEMP\n */\nexport const V_ID = 42\n/**\n * Allows sensors to send in a string representing the unit prefix to be displayed in GUI. This is not parsed by controller! E.g. cm, m, km, inch.\n *\n * Used By:\n *  S_DISTANCE, S_DUST, S_AIR_QUALITY\n */\nexport const V_UNIT_PREFIX = 43\n/**\n * HVAC cold setpoint\n *\n * Used By:\n *  S_HVAC\n */\nexport const V_HVAC_SETPOINT_COOL = 44\n/**\n * HVAC/Heater setpoint\n *\n * Used By:\n *  S_HVAC, S_HEATER\n */\nexport const V_HVAC_SETPOINT_HEAT = 45\n/**\n * Flow mode for HVAC (\"Auto\", \"ContinuousOn\", \"PeriodicOn\")\n *\n * Used By:\n *  S_HVAC\n */\nexport const V_HVAC_FLOW_MODE = 46\n/**\n * Text message to display on LCD or controller device\n *\n * Used By:\n *  S_INFO\n */\nexport const V_TEXT = 47\n/**\n * Custom messages used for controller/inter node specific commands, preferably using S_CUSTOM device type.\n *\n * Used By:\n *  S_CUSTOM\n */\nexport const V_CUSTOM = 48\n/**\n * GPS position and altitude. Payload: latitude;longitude;altitude(m). E.g. \"55.722526;13.017972;18\"\n *\n * Used By:\n *  S_GPS\n */\nexport const V_POSITION = 49\n/**\n * Record IR codes S_IR for playback\n *\n * Used By:\n *  S_IR\n */\nexport const V_IR_RECORD = 50\n/**\n * Water PH\n *\n * Used By:\n *  S_WATER_QUALITY\n */\nexport const V_PH = 51\n/**\n * Water ORP : redox potential in mV\n *\n * Used By:\n *  S_WATER_QUALITY\n */\nexport const V_ORP = 52\n/**\n * Water electric conductivity μS/cm (microSiemens/cm)\n *\n * Used By:\n *  S_WATER_QUALITY\n */\nexport const V_EC = 53\n/**\n * Reactive power: volt-ampere reactive (var)\n *\n * Used By:\n *  S_POWER\n */\nexport const V_VAR = 54\n/**\n * Apparent power: volt-ampere (VA)\n *\n * Used By:\n *  S_POWER\n */\nexport const V_VA = 55\n/**\n * Ratio of real power to apparent power: floating point value in the range [-1,..,1]\n *\n * Used By:\n *  S_POWER\n */\nexport const V_POWER_FACTOR = 56\n\n/**\n * Use this to report the battery level (in percent 0-100).\n */\nexport const I_BATTERY_LEVEL = 0\n/**\n * Sensors can request the current time from the Controller using this message. The time will be reported as the seconds since 1970\n */\nexport const I_TIME = 1\n/**\n * Used to request gateway version from controller.\n */\nexport const I_VERSION = 2\n/**\n * Use this to request a unique node id from the controller.\n */\nexport const I_ID_REQUEST = 3\n/**\n * Id response back to node. Payload contains node id.\n */\nexport const I_ID_RESPONSE = 4\n/**\n * Start/stop inclusion mode of the Controller (1=start, 0=stop).\n */\nexport const I_INCLUSION_MODE = 5\n/**\n * Config request from node. Reply with (M)etric or (I)mperal back to sensor.\n */\nexport const I_CONFIG = 6\n/**\n * When a sensor starts up, it broadcast a search request to all neighbor nodes. They reply with a I_FIND_PARENT_RESPONSE.\n */\nexport const I_FIND_PARENT = 7\n/**\n * Reply message type to I_FIND_PARENT request.\n */\nexport const I_FIND_PARENT_RESPONSE = 8\n/**\n * Sent by the gateway to the Controller to trace-log a message\n */\nexport const I_LOG_MESSAGE = 9\n/**\n * A message that can be used to transfer child sensors (from EEPROM routing table) of a repeating node.\n */\nexport const I_CHILDREN = 10\n/**\n * Optional sketch name that can be used to identify sensor in the Controller GUI\n */\nexport const I_SKETCH_NAME = 11\n/**\n * Optional sketch version that can be reported to keep track of the version of sensor in the Controller GUI.\n */\nexport const I_SKETCH_VERSION = 12\n/**\n * Used by OTA firmware updates. Request for node to reboot.\n */\nexport const I_REBOOT = 13\n/**\n * Send by gateway to controller when startup is complete.\n */\nexport const I_GATEWAY_READY = 14\n/**\n * Provides signing related preferences (first byte is preference version).\n */\nexport const I_SIGNING_PRESENTATION = 15\n/**\n * Used between sensors when requesting nonce.\n */\nexport const I_NONCE_REQUEST = 16\n/**\n * Used between sensors for nonce response.\n */\nexport const I_NONCE_RESPONSE = 17\n/**\n * Heartbeat request\n */\nexport const I_HEARTBEAT_REQUEST = 18\n/**\n * Presentation message\n */\nexport const I_PRESENTATION = 19\n/**\n * Discover request\n */\nexport const I_DISCOVER_REQUEST = 20\n/**\n * Discover response\n */\nexport const I_DISCOVER_RESPONSE = 21\n/**\n * Heartbeat response\n */\nexport const I_HEARTBEAT_RESPONSE = 22\n/**\n * Node is locked (reason in string-payload)\n */\nexport const I_LOCKED = 23\n/**\n * Ping sent to node, payload incremental hop counter\n */\nexport const I_PING = 24\n/**\n * In return to ping, sent back to sender, payload incremental hop counter\n */\nexport const I_PONG = 25\n/**\n * Register request to GW\n */\nexport const I_REGISTRATION_REQUEST = 26\n/**\n * Register response from GW\n */\nexport const I_REGISTRATION_RESPONSE = 27\n/**\n * Debug message\n */\nexport const I_DEBUG = 28\n\n/**\n * Door and window sensors\n *\n * Uses:\n *  V_TRIPPED, V_ARMED\n */\nexport const S_DOOR = 0\n/**\n * Motion sensors\n *\n * Uses:\n *  V_TRIPPED, V_ARMED\n */\nexport const S_MOTION = 1\n/**\n * Smoke sensor\n *\n * Uses:\n *  V_TRIPPED, V_ARMED\n */\nexport const S_SMOKE = 2\n/**\n * Binary device (on/off)\n *\n * Uses:\n *  V_STATUS, V_WATT\n */\nexport const S_BINARY = 3\n/**\n * Dimmable device of some kind\n *\n * Uses:\n *  V_STATUS (on/off), V_PERCENTAGE (dimmer level 0-100), V_WATT\n */\nexport const S_DIMMER = 4\n/**\n * Window covers or shades\n *\n * Uses:\n *  V_UP, V_DOWN, V_STOP, V_PERCENTAGE\n */\nexport const S_COVER = 5\n/**\n * Temperature sensor\n *\n * Uses:\n *  V_TEMP, V_ID\n */\nexport const S_TEMP = 6\n/**\n * Humidity sensor\n *\n * Uses:\n *  V_HUM\n */\nexport const S_HUM = 7\n/**\n * Barometer sensor (Pressure)\n *\n * Uses:\n *  V_PRESSURE, V_FORECAST\n */\nexport const S_BARO = 8\n/**\n * Wind sensor\n *\n * Uses:\n *  V_WIND, V_GUST, V_DIRECTION\n */\nexport const S_WIND = 9\n/**\n * Rain sensor\n *\n * Uses:\n *  V_RAIN, V_RAINRATE\n */\nexport const S_RAIN = 10\n/**\n * UV sensor\n *\n * Uses:\n *  V_UV\n */\nexport const S_UV = 11\n/**\n * Weight sensor for scales etc.\n *\n * Uses:\n *  V_WEIGHT, V_IMPEDANCE\n */\nexport const S_WEIGHT = 12\n/**\n * Power measuring device, like power meters\n *\n * Uses:\n *  V_WATT, V_KWH, V_VAR, V_VA, V_POWER_FACTOR\n */\nexport const S_POWER = 13\n/**\n * Heater device\n *\n * Uses:\n *  V_HVAC_SETPOINT_HEAT, V_HVAC_FLOW_STATE, V_TEMP, V_STATUS\n */\nexport const S_HEATER = 14\n/**\n * Distance sensor\n *\n * Uses:\n *  V_DISTANCE, V_UNIT_PREFIX\n */\nexport const S_DISTANCE = 15\n/**\n * Light sensor\n *\n * Uses:\n *  V_LIGHT_LEVEL (uncalibrated percentage), V_LEVEL (light level in lux)\n */\nexport const S_LIGHT_LEVEL = 16\n/**\n * Arduino node device\n */\nexport const S_ARDUINO_NODE = 17\n/**\n * Arduino repeating node device\n */\nexport const S_ARDUINO_REPEATER_NODE = 18\n/**\n * Lock device\n *\n * Uses:\n *  V_LOCK_STATUS\n */\nexport const S_LOCK = 19\n/**\n * Ir sender/receiver device\n *\n * Uses:\n *  V_IR_SEND, V_IR_RECEIVE, V_IR_RECORD\n */\nexport const S_IR = 20\n/**\n * Water meter\n *\n * Uses:\n *  V_FLOW, V_VOLUME\n */\nexport const S_WATER = 21\n/**\n * Air quality sensor e.g. MQ-2\n *\n * Uses:\n *  V_LEVEL, V_UNIT_PREFIX\n */\nexport const S_AIR_QUALITY = 22\n/**\n * Use this for custom sensors where no other fits.\n */\nexport const S_CUSTOM = 23\n/**\n * Dust level sensor\n *\n * Uses:\n *  V_LEVEL, V_UNIT_PREFIX\n */\nexport const S_DUST = 24\n/**\n * Scene controller device\n *\n * Uses:\n *  V_SCENE_ON, V_SCENE_OFF\n */\nexport const S_SCENE_CONTROLLER = 25\n/**\n * RGB light\n *\n * Uses:\n *  V_RGB, V_WATT\n */\nexport const S_RGB_LIGHT = 26\n/**\n * RGBW light (with separate white component)\n *\n * Uses:\n *  V_RGBW, V_WATT\n */\nexport const S_RGBW_LIGHT = 27\n/**\n * Color sensor\n *\n * Uses:\n *  V_RGB\n */\nexport const S_COLOR_SENSOR = 28\n/**\n * Thermostat/HVAC device\n *\n * Uses:\n *  V_STATUS, V_TEMP, V_HVAC_SETPOINT_HEAT, V_HVAC_SETPOINT_COOL, V_HVAC_FLOW_STATE, V_HVAC_FLOW_MODE, V_HVAC_SPEED\n */\nexport const S_HVAC = 29\n/**\n * Multimeter device\n *\n * Uses:\n *  V_VOLTAGE, V_CURRENT, V_IMPEDANCE\n */\nexport const S_MULTIMETER = 30\n/**\n * Sprinkler device\n *\n * Uses:\n *  V_STATUS (turn on/off), V_TRIPPED (if fire detecting device)\n */\nexport const S_SPRINKLER = 31\n/**\n * Water leak sensor\n *\n * Uses:\n *  V_TRIPPED, V_ARMED\n */\nexport const S_WATER_LEAK = 32\n/**\n * Sound sensor\n *\n * Uses:\n *  V_LEVEL (in dB), V_TRIPPED, V_ARMED\n */\nexport const S_SOUND = 33\n/**\n * Vibration sensor\n *\n * Uses:\n *  V_LEVEL (vibration in Hz), V_TRIPPED, V_ARMED\n */\nexport const S_VIBRATION = 34\n/**\n * Moisture sensor\n *\n * Uses:\n *  V_LEVEL (water content or moisture in percentage?), V_TRIPPED, V_ARMED\n */\nexport const S_MOISTURE = 35\n/**\n * LCD text device\n *\n * Uses:\n *  V_TEXT\n */\nexport const S_INFO = 36\n/**\n * Gas meter\n *\n * Uses:\n *  V_FLOW, V_VOLUME\n */\nexport const S_GAS = 37\n/**\n * GPS Sensor\n *\n * Uses:\n *  V_POSITION\n */\nexport const S_GPS = 38\n/**\n * Water quality sensor\n *\n * Uses:\n *  V_TEMP, V_PH, V_ORP, V_EC, V_STATUS\n */\nexport const S_WATER_QUALITY = 39\n\nexport const ST_FIRMWARE_CONFIG_REQUEST\t= 0\nexport const ST_FIRMWARE_CONFIG_RESPONSE\t= 1\nexport const ST_FIRMWARE_REQUEST\t\t\t    = 2\nexport const ST_FIRMWARE_RESPONSE\t\t\t  = 3\nexport const ST_SOUND\t\t\t\t\t\t        = 4\nexport const ST_IMAGE\t\t\t\t\t\t        = 5\n\nexport const P_STRING\t\t\t\t\t= 0\nexport const P_BYTE\t\t\t\t\t\t= 1\nexport const P_INT16\t\t\t\t\t\t= 2\nexport const P_UINT16\t\t\t\t\t= 3\nexport const P_LONG32\t\t\t\t\t= 4\nexport const P_ULONG32\t\t\t\t\t= 5\nexport const P_CUSTOM\t\t\t\t\t= 6\n"]}