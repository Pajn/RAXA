{"version":3,"sources":["../../src/helpers.ts"],"names":["createModification","isStatus","declareInterfaces","device","status","value","deviceId","id","interfaceId","statusId","modification","interfaces"],"mappings":";;;;;QAEMA,kB,GAAAA,kB;QASAC,Q,GAAAA,Q;QAgBAC,iB,GAAAA,iB;AAzBA,SAAAF,kBAAA,CAA6BG,MAA7B,EAA6CC,MAA7C,EAA6DC,KAA7D,EAAkE;AACtE,WAAO;AACLC,kBAAUH,OAAOI,EADZ;AAELC,qBAAaJ,OAAOI,WAFf;AAGLC,kBAAUL,OAAOG,EAHZ;AAILF;AAJK,KAAP;AAMD;AAEK,SAAAJ,QAAA,CAAmBS,YAAnB,EAA+CN,MAA/C,EAA6D;AACjE,WAAOM,aAAaF,WAAb,KAA6BJ,OAAOI,WAApC,IAAmDE,aAAaD,QAAb,KAA0BL,OAAOG,EAA3F;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGM,SAAAL,iBAAA,CAA4BS,UAA5B,EAAiE;AACrE,WAAOA,UAAP;AACD","file":"helpers.js","sourcesContent":["import {Device, Interface, Modification, Status} from './entities'\n\nexport function createModification(device: Device, status: Status, value): Modification {\n  return {\n    deviceId: device.id,\n    interfaceId: status.interfaceId,\n    statusId: status.id,\n    value,\n  }\n}\n\nexport function isStatus(modification: Modification, status: Status) {\n  return modification.interfaceId === status.interfaceId && modification.statusId === status.id\n}\n\n\n// export function mapObjects<O extends {[id: string]: T}, T, U>(objects: O, mapper: (object: T, key: string) => U): O & {[id: string]: U} {\n//   const declaredObjects = {}\n//   Object.entries(objects).forEach(([key, object]) => {\n//     declaredObjects[key] = mapper(object, key)\n//   })\n//   return declaredObjects as any\n// }\n\n/**\n * Adds an id to each interface and each status\n */\nexport function declareInterfaces(interfaces: {[id: string]: Interface}) {\n  return interfaces\n}\n"]}