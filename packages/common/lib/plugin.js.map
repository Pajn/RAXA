{"version":3,"sources":["../../src/plugin.ts"],"names":["Plugin","device","call","modification"],"mappings":";;;;;;;;;AAEA;;;;;;;;IAEMA,M,WAAAA,M;;;;;;;;;;;;AAOJ;;;;;;oCAMgBC,M,EAAc,CAA4B;AAE1D;;;;;;;;;mCAMeC,I,EAAYD,M,EAAc,CAA4B;;;2CAE9CE,Y,EAA4BF,M,EAAc,CACtC","file":"plugin.js","sourcesContent":["/* tslint:disable:no-empty */\nimport {Awaitable, Call, Device, Modification, PluginDefinition} from './entities'\nimport {Service} from './service'\n\nexport abstract class Plugin extends Service {\n  definition: PluginDefinition\n\n  setDeviceStatus: (modification: Modification) => Promise<void>\n  callDevice: (call: Call) => Promise<void>\n  upsertDevice: (device: Device) => Promise<Device>\n\n  /**\n   * Called when a device is being created from one of the plugins DeviceClasses\n   * Throw to abort the creation, return an updated device to alter its\n   * configuration or return undefined to don't do anything at all.\n   * If a Promise is returned then RAXA will wait for it to be resolved.\n   */\n  onDeviceCreated(device: Device): Awaitable<void|Device> {}\n\n  /**\n   * Called when a device owned by the plugin is beeing called.\n   * Throw to notify an error, return an updated device to alter its\n   * configuration or return undefined to don't do anything at all.\n   * If a Promise is returned then RAXA will wait for it to be resolved.\n   */\n  onDeviceCalled(call: Call, device: Device): Awaitable<void|Device> {}\n\n  onDeviceStatusModified(modification: Modification, device: Device):\n    Awaitable<void|Device> {}\n}\n"]}