{"version":3,"sources":["../../src/entities.ts"],"names":[],"mappings":"AA6IA","file":"entities.js","sourcesContent":["export type Awaitable<T> = T|Promise<T>\nexport type ValueType = 'string'|'integer'|'number'|'boolean'|'object'\nexport type Variable = {$ref: string}\n\nexport interface Device {\n  id: string\n  /**\n   * Name of this Device, it must be unique.\n   */\n  name: string\n  /**\n   * Id of the plugin that owns this Device.\n   */\n  pluginId: string\n  /**\n   * Id of the DeviceClass the Device implements.\n   */\n  deviceClassId: string\n  /**\n   * Configuration values for the plugin.\n   */\n  config?: {[id: string]: any}\n  /**\n   * A list with names of the Interfaces that the Device implements.\n   */\n  interfaces?: string[]\n  /**\n   * Variables of the device as required by the implemented interfaces.\n   * Every implemented interface with variables have its own object with its variables.\n   */\n  variables?: {[interfaceId: string]: {[variableName: string]: any}}\n}\n\n/**\n * Every Device is created from a DeviceClass that describes\n * what the device implements and requires.\n *\n * DeviceClasses is provided by plugins while Devices is\n * created primarily by the user.\n */\nexport interface DeviceClass {\n  id: string\n  description?: string\n  /**\n   * Id of the plugin that owns this DeviceClass.\n   */\n  pluginId: string\n  /**\n   * Configuration values for the plugin that is set by the user while creating the Device.\n   */\n  config?: {[id: string]: Property}\n  /**\n   * A list with names of the Interfaces that the Device created from this class implements.\n   */\n  interfaces: string[]\n  /**\n   * Static variables of the device as required by the implemented interfaces.\n   * Every implemented interface with variables have its own object with its variables.\n   */\n  variables?: {[interfaceId: string]: {[variableName: string]: any}}\n}\n\nexport interface Interface {\n  id: string\n  /**\n   * Id of the plugin that specifies this Interface.\n   * undefined if specified by RAXA.\n   */\n  pluginId?: string\n\n  methods?: {[method: string]: {}}\n  status?: {[status: string]: Property}\n  variables?: {[variable: string]: {}}\n}\n\nexport interface Call {\n  /**\n   * Id of the Device to be called.\n   */\n  deviceId: string\n  /**\n   * Id of the interface the method is defined in.\n   */\n  interfaceId: string\n  /**\n   * Method to be called.\n   */\n  method: string\n  /**\n   * Arguments to the method.\n   */\n  arguments: any\n}\n\nexport interface Modification {\n  /**\n   * Id of the Device to be modified.\n   */\n  deviceId: string\n  /**\n   * Id of the interface the status is defined in.\n   */\n  interfaceId: string\n  /**\n   * Status to be modified.\n   */\n  statusId: string\n  /**\n   * New value of the status.\n   */\n  value: any\n}\n\nexport interface Property {\n  type: ValueType\n\n  defaultValue?: any\n  optional?: boolean\n  modifiable?: boolean\n\n  properties?: {[id: string]: Property}\n  min?: number\n  max?: number\n  unit?: string\n}\n\nexport interface Status extends Property {\n  interfaceId: string\n}\n\nexport interface PluginDefinition {\n  id: string\n  deviceClasses: {[id: string]: DeviceClass}\n  interfaces: {[id: string]: Interface}\n}\n\nexport interface PluginConfiguration {\n  id: string\n  enabled: boolean\n}\n\n/**\n * Interface\n * 433MHz Pulse\n *\n * Device Class Connectors (implements 433MHz Pulse)\n * RaxaTellstick\n * Sleipner433\n *\n * Device Class Lamps (requires 433MHz Pulse)\n * Nexa Selflearning\n * Nexa Switch Case\n *\n *\n */\n"]}