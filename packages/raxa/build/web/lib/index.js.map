{"version":3,"sources":["../../src/web/lib/index.js"],"names":["process","env","NODE_ENV","require","colorize","time","Date","toTimeString","format","meta","colors","remove","transports","Console","add","formatter","level","message","catch","setImmediate","e","on","reason","p","error","console","log","stack"],"mappings":";;AAAA;;AACA;;AACA;;;;AACA;;;;AAGA,IAAIA,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCC,YAAQ,6BAAR;AACD;;eAEkBA,QAAQ,+BAAR,C;IAAZC,Q,YAAAA,Q;;AACP,IAAMC,OAAO,SAAPA,IAAO;AAAA,WAAM,IAAIC,IAAJ,GAAWC,YAAX,EAAN;AAAA,CAAb;AACA,IAAMC,SAAS,SAATA,MAAS,OAAI;AACjB,QAAI,CAACC,IAAL,EAAW,OAAO,EAAP;AACX,kBAAY,mBAAQA,IAAR,EAAc,EAACC,QAAQ,IAAT,EAAd,CAAZ;AACD,CAHD;AAIA,kBAAQC,MAAR,CAAe,kBAAQC,UAAR,CAAmBC,OAAlC;AACA,kBAAQC,GAAR,CAAY,kBAAQF,UAAR,CAAmBC,OAA/B,EAAwC;AACtCE,eAAW;AAAA,YAAEC,KAAF,QAAEA,KAAF;AAAA,YAASC,OAAT,QAASA,OAAT;AAAA,YAAkBR,IAAlB,QAAkBA,IAAlB;AAAA,eAA+BJ,MAA/B,SAAyCD,SAASY,KAAT,CAAzC,UAA6DC,OAA7D,GAAuET,OAAOC,IAAP,CAAvE;AAAA;AAD2B,CAAxC;AAGA,kBAAQO,KAAR,GAAgB,SAAhB;AAEA,iBAAOE,KAAP,CAAa;AAAA,WAAKC,aAAa,YAAA;AAAQ,cAAMC,CAAN;AAAS,KAA9B,CAAL;AAAA,CAAb;AAEApB,QAAQqB,EAAR,CAAW,oBAAX,EAAiC,UAACC,MAAD,EAASC,CAAT,EAAU;AACvC,sBAAQC,KAAR,CAAc,2CAAd,EAA2DD,CAA3D,EAA8D,WAA9D,EAA2ED,MAA3E;AACAG,YAAQD,KAAR,CAAcF,MAAd;AACAG,YAAQC,GAAR,CAAYJ,UAAUA,OAAOK,KAA7B;AACH,CAJD","file":"index.js","sourcesContent":["import 'babel-polyfill'\nimport {inspect} from 'util'\nimport winston from 'winston'\nimport {main} from './app'\n\n\nif (process.env.NODE_ENV !== 'production') {\n  require('source-map-support/register')\n}\n\nconst {colorize} = require('winston/lib/winston/config.js')\nconst time = () => new Date().toTimeString()\nconst format = meta => {\n  if (!meta) return ''\n  return `\\n${inspect(meta, {colors: true})}\\n`\n}\nwinston.remove(winston.transports.Console)\nwinston.add(winston.transports.Console, {\n  formatter: ({level, message, meta}) => `${time()} ${colorize(level)}: ${message}${format(meta)}`,\n})\nwinston.level = 'verbose'\n\nmain().catch(e => setImmediate(() => { throw e }))\n\nprocess.on('unhandledRejection', (reason, p) => {\n    winston.error('Possibly Unhandled Rejection at: Promise ', p, ' reason: ', reason)\n    console.error(reason)\n    console.log(reason && reason.stack)\n})\n"]}