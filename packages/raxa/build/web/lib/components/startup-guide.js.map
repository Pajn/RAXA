{"version":3,"sources":["../../src/web/lib/components/startup-guide.js","web/lib/components/startup-guide.js"],"names":["styles","require","InformationVideo","React","createElement","UserInformation","state","setState","user","company","className","row","object","onUpdate","Object","assign","fields","label","path","required","type","SelectPages","pages","setActive","pageList","values","map","key","page","id","src","image","name","active","onClick","ripple","AddAcounts","selectablePages","props","dispatch","networks","facebook","instagram","flex","network","Done","style","textAlign","email","Loading","loading","size","StartupGuide","_loading","_update","allowDismiss","onDone","title","component","allowIf","disallowReason"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,SAASC,QAAQ,sBAAR,CAAf;AAEA,IAAMC,mBAAmB,SAAnBA,gBAAmB;AAAA,WACvBC,MAAAC,aAAA,CAAA,KAAA,EAAA,IAAA,EAAA,OAAA,CADuB;AAAA,CAAzB;AAKA,IAAMC,kBAAkB,SAAlBA,eAAkB,OAAkB;AAAA,QAAhBC,KAAgB,QAAhBA,KAAgB;AAAA,QAATC,QAAS,QAATA,QAAS;AAAA,sBACCD,KADD,CACjCE,IADiC;AAAA,QACjCA,IADiC,+BAC1B,EAACA,MAAM,EAAP,EAAWC,SAAS,EAApB,EAD0B;;AAGxC,WAAON,MAAAC,aAAA,CAAA,KAAA,EAAA,EAAKM,WAAWV,OAAOW,GAAvB,EAAA,EACLR,MAAAC,aAAA,CAAA,KAAA,EAAA,IAAA,EACED,MAAAC,aAAA,yBAAW,EACTQ,QAAQJ,IADC,EAETK,UAAU;AAAA,mBAAQN,SAAQO,OAAAC,MAAA,CAAA,EAAA,EAAKT,KAAL,EAAU,EAAEE,UAAF,EAAV,CAAR,CAAR;AAAA,SAFD,EAGTQ,QAAQ,CACNb,MAAAC,aAAA,CAAA,IAAA,EAAA,IAAA,EAAA,sBAAA,CADM,EAEN,EAACa,OAAO,cAAR,EAAwBC,MAAM,CAAC,SAAD,EAAY,MAAZ,CAA9B,EAAmDC,UAAU,IAA7D,EAFM,EAGN,EAACF,OAAO,eAAR,EAAyBC,MAAM,CAAC,SAAD,EAAY,cAAZ,CAA/B,EAA4DE,MAAM,OAAlE,EAA2ED,UAAU,IAArF,EAHM,EAIN,EAACF,OAAO,eAAR,EAAyBC,MAAM,CAAC,SAAD,EAAY,OAAZ,CAA/B,EAAqDC,UAAU,IAA/D,EAJM,EAKN,EAACF,OAAO,YAAR,EAAsBC,MAAM,CAAC,SAAD,EAAY,SAAZ,CAA5B,EAAoDC,UAAU,IAA9D,EALM,CAHC,EAAX,CADF,CADK,EAaLhB,MAAAC,aAAA,CAAA,KAAA,EAAA,IAAA,EACED,MAAAC,aAAA,yBAAW,EACTQ,QAAQJ,IADC,EAETK,UAAU;AAAA,mBAAQN,SAAQO,OAAAC,MAAA,CAAA,EAAA,EAAKT,KAAL,EAAU,EAAEE,UAAF,EAAV,CAAR,CAAR;AAAA,SAFD,EAGTQ,QAAQ,CACNb,MAAAC,aAAA,CAAA,IAAA,EAAA,IAAA,EAAA,sBAAA,CADM,EAEN,EAACa,OAAO,MAAR,EAAgBC,MAAM,CAAC,MAAD,EAAS,MAAT,CAAtB,EAAwCC,UAAU,IAAlD,EAFM,EAGN,EAACF,OAAO,eAAR,EAAyBC,MAAM,CAAC,MAAD,EAAS,OAAT,CAA/B,EAAkDE,MAAM,OAAxD,EAAiED,UAAU,IAA3E,EAHM,EAIN,EAACF,OAAO,UAAR,EAAoBC,MAAM,CAAC,MAAD,EAAS,UAAT,CAA1B,EAAgDE,MAAM,UAAtD,EAJM,CAHC,EAAX,CADF,CAbK,CAAP;AAyBD,CA5BD;AA8BA,IAAMC,cAAc,SAAdA,WAAc;AAAA,QAAEC,KAAF,SAAEA,KAAF;AAAA,QAASC,SAAT,SAASA,SAAT;AAAA,WAClBpB,MAAAC,aAAA,CAAA,KAAA,EAAA,EAAKM,WAAWV,OAAOwB,QAAvB,EAAA,EACGV,OAAOW,MAAP,CAAcH,SAAS,EAAvB,EAA2BI,GAA3B,CAA+B;AAAA,eAC9BvB,MAAAC,aAAA,CAAA,KAAA,EAAA,EAAKuB,KAAKC,KAAKC,EAAf,EAAmBnB,WAAWV,OAAO4B,IAArC,EAAA,EACEzB,MAAAC,aAAA,CAAA,KAAA,EAAA,EAAK0B,KAAKF,KAAKG,KAAf,EAAA,CADF,EAEE5B,MAAAC,aAAA,CAAA,MAAA,EAAA,IAAA,EAAOwB,KAAKI,IAAZ,CAFF,EAGGJ,KAAKK,MAAL,GACG9B,MAAAC,aAAA,mBAAO,EAAC8B,SAASX,UAAUK,IAAV,EAAgB,KAAhB,CAAV,EAAkCO,QAAM,IAAxC,EAAP,EAA+C,SAA/C,CADH,GAEGhC,MAAAC,aAAA,mBAAO,EAAC8B,SAASX,UAAUK,IAAV,EAAgB,IAAhB,CAAV,EAAiCO,QAAM,IAAvC,EAAP,EAA8C,cAA9C,CALN,CAD8B;AAAA,KAA/B,CADH,CADkB;AAAA,CAApB;AAaA,IAAMC,aAAa,yBACjB;AAAA,WAAU,EAAC5B,MAAMF,MAAME,IAAN,CAAWA,IAAlB,EAAwB6B,iBAAiB/B,MAAM+B,eAA/C,EAAV;AAAA,CADiB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,4CAGA;AAAA,yBAC2B,KAAKC,KADhC;AAAA,gBACRC,QADQ,UACRA,QADQ;AAAA,gBACEF,eADF,UACEA,eADF;AAAA,gBACmB7B,IADnB,UACmBA,IADnB;;AAAA,wBAEeA,KAAKgC,QAAL,IAAiB,EAFhC;AAAA,gBAERC,QAFQ,SAERA,QAFQ;AAAA,gBAEEC,SAFF,SAEEA,SAFF;;AAIf,gBAAID,YAAY,CAACJ,gBAAgBI,QAAjC,EAA2C;AACzCF,yBAAS,+BAAmB,UAAnB,CAAT;AACD;AACD,gBAAIG,aAAa,CAACL,gBAAgBK,SAAlC,EAA6C;AAC3CH,yBAAS,+BAAmB,WAAnB,CAAT;AACD;AACF;AAbgB;AAAA;AAAA,iCAeX;AAAA,0BACsC,KAAKD,KAD3C;AAAA,gBACGC,QADH,WACGA,QADH;AAAA,gBACaF,eADb,WACaA,eADb;AAAA,gBAC8B7B,IAD9B,WAC8BA,IAD9B;;AAAA,wBAE0BA,KAAKgC,QAAL,IAAiB,EAF3C;AAAA,gBAEGC,QAFH,SAEGA,QAFH;AAAA,gBAEaC,SAFb,SAEaA,SAFb;;AAIJ,mBAAOvC,MAAAC,aAAA,CAAA,KAAA,EAAA,IAAA,EACLD,MAAAC,aAAA,CAAA,GAAA,EAAA,IAAA,EAAA,4FAAA,CADK,EAELD,MAAAC,aAAA,CAAA,KAAA,EAAA,EAAKM,WAAWV,OAAOW,GAAvB,EAAA,EACER,MAAAC,aAAA,CAAA,KAAA,EAAA,EAAKM,WAAWV,OAAO2C,IAAvB,EAAA,EACExC,MAAAC,aAAA,CAAA,IAAA,EAAA,IAAA,EAAA,UAAA,CADF,EAEGqC,WACGtC,MAAAC,aAAA,CAACiB,WAAD,EAAY,EAACC,OAAOe,gBAAgBI,QAAxB,EAAkClB,WAAW,mBAACK,IAAD,EAAOK,MAAP;AAAA,2BAAkB;AAAA,+BACzEM,SAAS,sBAAU,UAAV,EAAsBX,IAAtB,EAA4BK,MAA5B,CAAT,CADyE;AAAA,qBAAlB;AAAA,iBAA7C,EAAZ,CADH,GAGG9B,MAAAC,aAAA,6BAAa,EAACwC,SAAQ,UAAT,EAAb,CALN,CADF,EASEzC,MAAAC,aAAA,CAAA,KAAA,EAAA,EAAKM,WAAWV,OAAO2C,IAAvB,EAAA,EACExC,MAAAC,aAAA,CAAA,IAAA,EAAA,IAAA,EAAA,WAAA,CADF,EAEGsC,YACGvC,MAAAC,aAAA,CAACiB,WAAD,EAAY,EAACC,OAAOe,gBAAgBK,SAAxB,EAAmCnB,WAAW,mBAACK,IAAD,EAAOK,MAAP;AAAA,2BAAkB;AAAA,+BAC1EM,SAAS,sBAAU,WAAV,EAAuBX,IAAvB,EAA6BK,MAA7B,CAAT,CAD0E;AAAA,qBAAlB;AAAA,iBAA9C,EAAZ,CADH,GAGG9B,MAAAC,aAAA,6BAAa,EAACwC,SAAQ,WAAT,EAAb,CALN,CATF,CAFK,CAAP;AAqBD;AAxCgB;;AAAA;AAAA,oBAAnB;AA2CA,IAAMC,OAAO,SAAPA,IAAO;AAAA,QAAUrC,IAAV,SAAEF,KAAF,CAAUE,IAAV;AAAA,WACXL,MAAAC,aAAA,CAAA,KAAA,EAAA,IAAA,EACED,MAAAC,aAAA,CAAA,IAAA,EAAA,IAAA,EAAA,sBAAA,CADF,EAEED,MAAAC,aAAA,CAAA,IAAA,EAAA,IAAA,EAAA,oEAAA,CAFF,EAIED,MAAAC,aAAA,CAAA,KAAA,EAAA,EAAKM,WAAWV,OAAOW,GAAvB,EAAA,EACER,MAAAC,aAAA,CAAA,KAAA,EAAA,IAAA,EACED,MAAAC,aAAA,CAAA,GAAA,EAAA,IAAA,EAAA,mEAAA,CADF,EAKED,MAAAC,aAAA,CAAA,GAAA,EAAA,IAAA,EC3CQ,kFD2CR,EAEED,MAAAC,aAAA,CAAA,MAAA,EAAA,EAAM0C,OAAO,EAACC,WAAW,QAAZ,EAAb,EAAA,EAAkC,cAAlC,CAFF,CALF,CADF,EAWE5C,MAAAC,aAAA,CAAA,KAAA,EAAA,IAAA,EACED,MAAAC,aAAA,CAAA,GAAA,EAAA,IAAA,EC7CQ,uBD6CR,EAEED,MAAAC,aAAA,CAAA,MAAA,EAAA,IAAA,EAAOI,KAAKwC,KAAZ,CAFF,CADF,CAXF,CAJF,CADW;AAAA,CAAb;AAyBO,IAAMC,4BAAU,SAAVA,OAAU;AAAA,WACrB9C,MAAAC,aAAA,CAAA,KAAA,EAAA,EAAKM,WAAWV,OAAOkD,OAAvB,EAAA,EACE/C,MAAAC,aAAA,mBAAQ,EAAC+C,MAAM,EAAP,EAAR,CADF,CADqB;AAAA,CAAhB;AAKA,IAAMC,sCAAe,yBAC1B;AAAA,WAAU,EAACF,SAAS5C,MAAM+B,eAAN,CAAsBgB,QAAtB,CAA+BC,OAA/B,IAA0ChD,MAAME,IAAN,CAAW0C,OAA/D,EAAV;AAAA,CAD0B,EAE1B;AAAA,QAAEX,QAAF,SAAEA,QAAF;AAAA,QAAYW,OAAZ,SAAYA,OAAZ;AAAA,WACA/C,MAAAC,aAAA,eAAM,EAACmD,cAAc,KAAf,EAAsBC,QAAQ,uBAAK;AACvCjB,qBAAS,yBAAT;AACAA,qBAAS,sBAAWjC,MAAME,IAAjB,CAAT;AAEA,mBAAO,KAAP;AACD,SALK,EAKHc,OAAO,CACR;AACEmC,mBAAO,EADT;AAEEC,uBAAWxD;AAFb,SADQ,EAKR;AACEuD,mBAAO,qCADT;AAEEC,uBAAWrD;AAFb,SALQ,EASR;AACEoD,mBAAO,kEADT;AAEEC,uBAAWtB;AAFb,SATQ,EAaR;AACEsB,uBAAWR,UAAUD,OAAV,GAAoBJ,IADjC;AAEEc,qBAAS;AAAA,oBAAEnD,IAAF,SAAEA,IAAF;AAAA,uBAAY,CAAC,CAACA,IAAd;AAAA,aAFX;AAGEoD,4BAAgB;AAHlB,SAbQ,CALJ,EAAN,CADA;AAAA,CAF0B,CAArB","file":"startup-guide.js","sourcesContent":["import {Component} from 'react'\nimport {Button} from 'react-mdl'\nimport {connect} from 'react-redux'\nimport {dialog} from 'dashboard/dialog'\nimport {Guide} from 'dashboard/components/guide'\nimport {Spinner} from 'dashboard/components/spinner'\nimport {FormHelper} from './form-helper'\nimport {SocialButton} from './social-button'\nimport {updateUser} from '../lib/action-creators/auth'\nimport {setActive, getSelectablePages, updatePages} from '../lib/action-creators/pages'\n\nconst styles = require('./startup-guide.scss')\n\nconst InformationVideo = () =>\n  <div>\n    Info!\n  </div>\n\nconst UserInformation = ({state, setState}) => {\n  const {user = {user: {}, company: {}}} = state\n\n  return <div className={styles.row}>\n    <div>\n      <FormHelper\n        object={user}\n        onUpdate={user => setState({...state, user})}\n        fields={[\n          <h3>Företagsuppgifter</h3>,\n          {label: 'Företagsnamn', path: ['company', 'name'], required: true},\n          {label: 'Epost address', path: ['company', 'contactEmail'], type: 'email', required: true},\n          {label: 'Telefonnummer', path: ['company', 'phone'], required: true},\n          {label: 'Gatuadress', path: ['company', 'address'], required: true},\n        ]} />\n    </div>\n    <div>\n      <FormHelper\n        object={user}\n        onUpdate={user => setState({...state, user})}\n        fields={[\n          <h3>Inloggningsuppgifter</h3>,\n          {label: 'Namn', path: ['user', 'name'], required: true},\n          {label: 'Epost address', path: ['user', 'email'], type: 'email', required: true},\n          {label: 'Lösenord', path: ['user', 'password'], type: 'password'},\n        ]} />\n    </div>\n  </div>\n}\n\nconst SelectPages = ({pages, setActive}) =>\n  <div className={styles.pageList}>\n    {Object.values(pages || {}).map(page =>\n      <div key={page.id} className={styles.page}>\n        <img src={page.image} />\n        <span>{page.name}</span>\n        {page.active\n          ? <Button onClick={setActive(page, false)} ripple>Checked</Button>\n          : <Button onClick={setActive(page, true)} ripple>Lägg till</Button>}\n      </div>\n    )}\n  </div>\n\nconst AddAcounts = connect(\n  state => ({user: state.user.user, selectablePages: state.selectablePages})\n)(class extends Component {\n  componentDidMount() {\n    const {dispatch, selectablePages, user} = this.props\n    const {facebook, instagram} = user.networks || {}\n\n    if (facebook && !selectablePages.facebook) {\n      dispatch(getSelectablePages('facebook'))\n    }\n    if (instagram && !selectablePages.instagram) {\n      dispatch(getSelectablePages('instagram'))\n    }\n  }\n\n  render() {\n    const {dispatch, selectablePages, user} = this.props\n    const {facebook, instagram} = user.networks || {}\n\n    return <div>\n      <p>Du kan alltid lägga till fler konton seenare under fliken mina sidor i inställningar</p>\n      <div className={styles.row}>\n        <div className={styles.flex}>\n          <h3>Facebook</h3>\n          {facebook\n            ? <SelectPages pages={selectablePages.facebook} setActive={(page, active) => () =>\n                dispatch(setActive('facebook', page, active))} />\n            : <SocialButton network='facebook' />\n          }\n        </div>\n        <div className={styles.flex}>\n          <h3>Instagram</h3>\n          {instagram\n            ? <SelectPages pages={selectablePages.instagram} setActive={(page, active) => () =>\n                dispatch(setActive('instagram', page, active))} />\n            : <SocialButton network='instagram' />\n          }\n        </div>\n      </div>\n    </div>\n  }\n})\n\nconst Done = ({state: {user}}) =>\n  <div>\n    <h2>Då var det klart!</h2>\n    <h3>Nu är du redo att se all din statistik i ett och samma verktyg!</h3>\n\n    <div className={styles.row}>\n      <div>\n        <p>\n          Din testperiod varar i 30 dagar.\n          Vi kommer sedan att kontakta dig\n        </p>\n        <p>\n          Vill du ha en kostnadsfri presentation om vad SocialView kan göra för dig?\n          <span style={{textAlign: 'center'}}>Kontakta mig</span>\n        </p>\n      </div>\n      <div>\n        <p>\n          Ditt användarnamn:\n          <span>{user.email}</span>\n        </p>\n      </div>\n    </div>\n  </div>\n\nexport const Loading = () =>\n  <div className={styles.loading}>\n    <Spinner size={40} />\n  </div>\n\nexport const StartupGuide = connect(\n  state => ({loading: state.selectablePages._loading._update || state.user.loading})\n)(({dispatch, loading}) =>\n  <Guide allowDismiss={false} onDone={state => {\n    dispatch(updatePages())\n    dispatch(updateUser(state.user))\n\n    return false\n  }} pages={[\n    {\n      title: '',\n      component: InformationVideo,\n    },\n    {\n      title: 'Lägg till dina inloggningsuppgifter',\n      component: UserInformation,\n    },\n    {\n      title: 'Hantera alla dina konton i samma verktyg - lägg till konto nedan',\n      component: AddAcounts,\n    },\n    {\n      component: loading ? Loading : Done,\n      allowIf: ({user}) => !!user,\n      disallowReason: 'Du måste fylla i alla obligatoriska fält i guiden innan du går vidare',\n    },\n  ]} />\n)\n","import { Component } from 'react';\nimport { Button } from 'react-mdl';\nimport { connect } from 'react-redux';\nimport { Guide } from 'dashboard/components/guide';\nimport { Spinner } from 'dashboard/components/spinner';\nimport { FormHelper } from './form-helper';\nimport { SocialButton } from './social-button';\nimport { updateUser } from '../lib/action-creators/auth';\nimport { setActive, getSelectablePages, updatePages } from '../lib/action-creators/pages';\nconst styles = require('./startup-guide.scss');\nconst InformationVideo = () => React.createElement(\"div\", null, \"Info!\");\nconst UserInformation = ({ state, setState }) => {\n    const { user = { user: {}, company: {} } } = state;\n    return React.createElement(\"div\", { className: styles.row },\n        React.createElement(\"div\", null,\n            React.createElement(FormHelper, { object: user, onUpdate: user => setState(Object.assign({}, state, { user })), fields: [\n                    React.createElement(\"h3\", null, \"F\\u00F6retagsuppgifter\"),\n                    { label: 'Företagsnamn', path: ['company', 'name'], required: true },\n                    { label: 'Epost address', path: ['company', 'contactEmail'], type: 'email', required: true },\n                    { label: 'Telefonnummer', path: ['company', 'phone'], required: true },\n                    { label: 'Gatuadress', path: ['company', 'address'], required: true },\n                ] })),\n        React.createElement(\"div\", null,\n            React.createElement(FormHelper, { object: user, onUpdate: user => setState(Object.assign({}, state, { user })), fields: [\n                    React.createElement(\"h3\", null, \"Inloggningsuppgifter\"),\n                    { label: 'Namn', path: ['user', 'name'], required: true },\n                    { label: 'Epost address', path: ['user', 'email'], type: 'email', required: true },\n                    { label: 'Lösenord', path: ['user', 'password'], type: 'password' },\n                ] })));\n};\nconst SelectPages = ({ pages, setActive }) => React.createElement(\"div\", { className: styles.pageList }, Object.values(pages || {}).map(page => React.createElement(\"div\", { key: page.id, className: styles.page },\n    React.createElement(\"img\", { src: page.image }),\n    React.createElement(\"span\", null, page.name),\n    page.active\n        ? React.createElement(Button, { onClick: setActive(page, false), ripple: true }, \"Checked\")\n        : React.createElement(Button, { onClick: setActive(page, true), ripple: true }, \"L\\u00E4gg till\"))));\nconst AddAcounts = connect(state => ({ user: state.user.user, selectablePages: state.selectablePages }))(class extends Component {\n    componentDidMount() {\n        const { dispatch, selectablePages, user } = this.props;\n        const { facebook, instagram } = user.networks || {};\n        if (facebook && !selectablePages.facebook) {\n            dispatch(getSelectablePages('facebook'));\n        }\n        if (instagram && !selectablePages.instagram) {\n            dispatch(getSelectablePages('instagram'));\n        }\n    }\n    render() {\n        const { dispatch, selectablePages, user } = this.props;\n        const { facebook, instagram } = user.networks || {};\n        return React.createElement(\"div\", null,\n            React.createElement(\"p\", null, \"Du kan alltid l\\u00E4gga till fler konton seenare under fliken mina sidor i inst\\u00E4llningar\"),\n            React.createElement(\"div\", { className: styles.row },\n                React.createElement(\"div\", { className: styles.flex },\n                    React.createElement(\"h3\", null, \"Facebook\"),\n                    facebook\n                        ? React.createElement(SelectPages, { pages: selectablePages.facebook, setActive: (page, active) => () => dispatch(setActive('facebook', page, active)) })\n                        : React.createElement(SocialButton, { network: 'facebook' })),\n                React.createElement(\"div\", { className: styles.flex },\n                    React.createElement(\"h3\", null, \"Instagram\"),\n                    instagram\n                        ? React.createElement(SelectPages, { pages: selectablePages.instagram, setActive: (page, active) => () => dispatch(setActive('instagram', page, active)) })\n                        : React.createElement(SocialButton, { network: 'instagram' }))));\n    }\n});\nconst Done = ({ state: { user } }) => React.createElement(\"div\", null,\n    React.createElement(\"h2\", null, \"D\\u00E5 var det klart!\"),\n    React.createElement(\"h3\", null, \"Nu \\u00E4r du redo att se all din statistik i ett och samma verktyg!\"),\n    React.createElement(\"div\", { className: styles.row },\n        React.createElement(\"div\", null,\n            React.createElement(\"p\", null, \"Din testperiod varar i 30 dagar. Vi kommer sedan att kontakta dig\"),\n            React.createElement(\"p\", null,\n                \"Vill du ha en kostnadsfri presentation om vad SocialView kan g\\u00F6ra f\\u00F6r dig?\",\n                React.createElement(\"span\", { style: { textAlign: 'center' } }, \"Kontakta mig\"))),\n        React.createElement(\"div\", null,\n            React.createElement(\"p\", null,\n                \"Ditt anv\\u00E4ndarnamn:\",\n                React.createElement(\"span\", null, user.email)))));\nexport const Loading = () => React.createElement(\"div\", { className: styles.loading },\n    React.createElement(Spinner, { size: 40 }));\nexport const StartupGuide = connect(state => ({ loading: state.selectablePages._loading._update || state.user.loading }))(({ dispatch, loading }) => React.createElement(Guide, { allowDismiss: false, onDone: state => {\n        dispatch(updatePages());\n        dispatch(updateUser(state.user));\n        return false;\n    }, pages: [\n        {\n            title: '',\n            component: InformationVideo,\n        },\n        {\n            title: 'Lägg till dina inloggningsuppgifter',\n            component: UserInformation,\n        },\n        {\n            title: 'Hantera alla dina konton i samma verktyg - lägg till konto nedan',\n            component: AddAcounts,\n        },\n        {\n            component: loading ? Loading : Done,\n            allowIf: ({ user }) => !!user,\n            disallowReason: 'Du måste fylla i alla obligatoriska fält i guiden innan du går vidare',\n        },\n    ] }));\n"]}