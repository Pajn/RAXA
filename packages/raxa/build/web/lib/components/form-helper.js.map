{"version":3,"sources":["../../src/web/lib/components/form-helper.js","web/lib/components/form-helper.js"],"names":["styles","require","FormHelper","actions","fields","object","onSave","onUpdate","updatedObject","setUpdatedObject","saveButton","formId","disabled","changed","React","createElement","id","onSubmit","e","preventDefault","map","field","i","props","key","path","value","undefined","Object","assign","onChange","target"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,SAASC,QAAQ,oBAAR,CAAf;AAEO,IAAMC,kCAAa,yBACxB,eADwB,EACP,kBADO,EACa,IADb,EAExB,gBAAkH;AAAA,4BAAhHC,OAAgH;AAAA,QAAhHA,OAAgH,gCAAtG,IAAsG;AAAA,QAAhGC,MAAgG,QAAhGA,MAAgG;AAAA,QAAxFC,MAAwF,QAAxFA,MAAwF;AAAA,QAAhFC,MAAgF,QAAhFA,MAAgF;AAAA,QAAxEC,QAAwE,QAAxEA,QAAwE;AAAA,QAA9DC,aAA8D,QAA9DA,aAA8D;AAAA,QAA/CC,gBAA+C,QAA/CA,gBAA+C;AAAA,QAA7BC,UAA6B,QAA7BA,UAA6B;AAAA,QAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,QAATC,QAAS,QAATA,QAAS;;AAClH,QAAIC,UAAU,CAAC,CAACN,QAAhB;AAEAC,oBAAgBD,WACZF,MADY,GAEZG,iBAAiBH,MAFrB;AAIA,WACES,MAAAC,aAAA,CAAA,MAAA,EAAA,EAAMC,IAAIL,MAAV,EAAkBM,UAAU,qBAAC;AAC3BC,cAAEC,cAAF;AACAb,mBAAOE,aAAP;AACD,SAHD,EAAA,EAIGJ,OAAOgB,GAAP,CAAW,UAACC,KAAD,EAAQC,CAAR,EAAS;AACnB,YAAI,CAACD,KAAL,EAAY,OAAO,IAAP;AACZ,YAAIA,MAAME,KAAV,EAAiB,OAAO,yBAAaF,KAAb,EAAoB,EAACG,KAAKF,CAAN,EAApB,CAAP;AAEjB,YAAI,iBAAKD,MAAMI,IAAX,EAAiBjB,aAAjB,MAAoC,iBAAKa,MAAMI,IAAX,EAAiBpB,MAAjB,CAAxC,EAAkE;AAChEQ,sBAAU,IAAV;AACD;AAED,YAAIa,QAAQ,iBAAKL,MAAMI,IAAX,EAAiBjB,aAAjB,CAAZ;AACA,YAAIkB,UAAUC,SAAd,EAAyB;AACvBD,oBAAQ,EAAR;AACD;AAED,eACEZ,MAAAC,aAAA,CAAA,KAAA,EAAA,EAAKS,KAAKF,CAAV,EAAA,EACER,MAAAC,aAAA,sBAAUa,OAAAC,MAAA,CAAA,EAACH,OAAOA,KAAR,EAAed,UAAUA,QAAzB,EACCkB,UAAU;AAAA,uBAAK,CAACvB,YAAYE,gBAAb,EACb,gBAAI,qBAASY,MAAMI,IAAf,CAAJ,EAA0BP,EAAEa,MAAF,CAASL,KAAnC,EAA0ClB,aAA1C,CADa,CAAL;AAAA,aADX,EAAA,EAGQa,KAHR,CAAV,CADF,CADF;AAQD,KArBA,CAJH,EA0BGX,cAAcI,MAAAC,aAAA,mBAAO,EAACH,UAAU,CAACC,OAAD,IAAYD,QAAvB,EAAP,EAAyCF,UAAzC,CA1BjB,ECaI,IDbJ,EA0BkFP,OA1BlF,CADF;AA8BD,CAvCyB,CAAnB","file":"form-helper.js","sourcesContent":["import {lensPath, path, set} from 'ramda'\nimport {cloneElement} from 'react'\nimport {Button, Textfield} from 'react-mdl'\nimport withState from 'recompose/withState'\n\nconst styles = require('./form-helper.scss')\n\nexport const FormHelper = withState(\n  'updatedObject', 'setUpdatedObject', null,\n)(({actions = null, fields, object, onSave, onUpdate, updatedObject, setUpdatedObject, saveButton, formId, disabled}) => {\n  let changed = !!onUpdate\n\n  updatedObject = onUpdate\n    ? object\n    : updatedObject || object\n\n  return (\n    <form id={formId} onSubmit={e => {\n      e.preventDefault()\n      onSave(updatedObject)\n    }}>\n      {fields.map((field, i) => {\n        if (!field) return null\n        if (field.props) return cloneElement(field, {key: i})\n\n        if (path(field.path, updatedObject) !== path(field.path, object)) {\n          changed = true\n        }\n\n        let value = path(field.path, updatedObject)\n        if (value === undefined) {\n          value = ''\n        }\n\n        return (\n          <div key={i}>\n            <Textfield value={value} disabled={disabled}\n                       onChange={e => (onUpdate || setUpdatedObject)(\n                         set(lensPath(field.path), e.target.value, updatedObject)\n                       )} {...field} />\n          </div>\n        )\n      })}\n      {saveButton && <Button disabled={!changed || disabled}>{saveButton}</Button>}  {actions}\n    </form>\n  )\n})\n","import { lensPath, path, set } from 'ramda';\nimport { cloneElement } from 'react';\nimport { Button, Textfield } from 'react-mdl';\nimport withState from 'recompose/withState';\nconst styles = require('./form-helper.scss');\nexport const FormHelper = withState('updatedObject', 'setUpdatedObject', null)(({ actions = null, fields, object, onSave, onUpdate, updatedObject, setUpdatedObject, saveButton, formId, disabled }) => {\n    let changed = !!onUpdate;\n    updatedObject = onUpdate\n        ? object\n        : updatedObject || object;\n    return (React.createElement(\"form\", { id: formId, onSubmit: e => {\n            e.preventDefault();\n            onSave(updatedObject);\n        } },\n        fields.map((field, i) => {\n            if (!field)\n                return null;\n            if (field.props)\n                return cloneElement(field, { key: i });\n            if (path(field.path, updatedObject) !== path(field.path, object)) {\n                changed = true;\n            }\n            let value = path(field.path, updatedObject);\n            if (value === undefined) {\n                value = '';\n            }\n            return (React.createElement(\"div\", { key: i },\n                React.createElement(Textfield, Object.assign({ value: value, disabled: disabled, onChange: e => (onUpdate || setUpdatedObject)(set(lensPath(field.path), e.target.value, updatedObject)) }, field))));\n        }),\n        saveButton && React.createElement(Button, { disabled: !changed || disabled }, saveButton),\n        \"  \",\n        actions));\n});\n"]}