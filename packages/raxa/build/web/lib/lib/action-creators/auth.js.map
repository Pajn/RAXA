{"version":3,"sources":["../../src/web/lib/lib/action-creators/auth.js","web/lib/lib/action-creators/auth.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","signIn","email","password","dispatch","response","json","body","company","user","token","signedIn","signInFail","jwt","redirect","replace","signOut","inviteUser","console","log","status","getInvite","inviteUpdate","invalid","inviteUserUpdated","registerInvite","getState","loading","invite","registeredUser","registerUser","registeredCompany","updateUser","name","contactEmail","address","phone","Error","text"],"mappings":"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","file":"auth.js","sourcesContent":["import {action, actions} from '../actions'\nimport {getPages} from './pages'\nimport {history} from '../environment'\nimport {get, post} from '../http'\n\nexport const signIn = ({email, password}) => async (dispatch) => {\n  const response = await post(`/auth/login`, {email, password})\n\n  const body = await response.json()\n  const {company, user, token} = body\n\n  if (user && token) {\n    dispatch(signedIn(token, user, company))\n  } else {\n    dispatch(action(actions.signInFail))\n  }\n}\n\nexport const signedIn = (jwt, user, company, {redirect = true} = {}) => dispatch => {\n  dispatch(action(actions.signIn, {token: jwt, user, company}))\n  dispatch(getPages())\n  if (redirect) {\n    history.replace('/')\n  }\n}\n\nexport const signOut = () => dispatch => {\n  dispatch(actions.signOut)\n  history.replace('/sign-in')\n}\n\nexport const inviteUser = async (email) => {\n  const response = await post(`/auth/invite`, {user: {email}})\n\n  console.log(response.status)\n  console.log(await response.json())\n}\n\nexport const getInvite = token => async (dispatch) => {\n  dispatch(action(actions.inviteUpdate, {token}))\n\n  const response = await get(`/auth/invite`, {\n    token,\n  })\n\n  const {user} = await response.json()\n\n  if (user) {\n    dispatch(action(actions.inviteUpdate, {user}))\n  } else {\n    dispatch(action(actions.inviteUpdate, {invalid: true}))\n  }\n}\n\nexport const inviteUserUpdated = user => dispatch => {\n  dispatch(action(actions.inviteUpdate, {user}))\n}\n\nexport const registerInvite = user => async (dispatch, getState) => {\n  dispatch(action(actions.inviteUpdate, {loading: true}))\n\n  const response = await post(`/auth/register-invite`, {\n    token: getState().invite.token,\n    user,\n  })\n\n  const {company, user: registeredUser, token} = await response.json()\n\n  dispatch(action(actions.inviteUpdate, {loading: false}))\n\n  if (registeredUser) {\n    dispatch(signedIn(token, registeredUser, company))\n  }\n}\n\nexport const registerUser = (company, user) => async (dispatch) => {\n  const response = await post(`/auth/register`, {company, user})\n\n  const {company: registeredCompany, user: registeredUser, token} = await response.json()\n\n  if (registeredUser) {\n    dispatch(signedIn(token, registeredUser, registeredCompany))\n  }\n}\n\nexport const updateUser = ({company, user}) => async (dispatch) => {\n  dispatch(action(actions.updateUser, {loading: true}))\n  const response = await post(`/user`, {\n    company: {\n      name: company.name,\n      contactEmail: company.contactEmail,\n      address: company.address,\n      phone: company.phone,\n    },\n    user: {\n      name: user.name,\n      email: user.email,\n      password: user.password,\n    },\n  })\n\n  if (response.status >= 400) {\n    throw new Error(await response.text())\n  }\n  delete user.password\n  dispatch(action(actions.updateUser, {company, user, loading: false}))\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { action, actions } from '../actions';\nimport { getPages } from './pages';\nimport { history } from '../environment';\nimport { get, post } from '../http';\nexport const signIn = ({ email, password }) => (dispatch) => __awaiter(this, void 0, void 0, function* () {\n    const response = yield post(`/auth/login`, { email, password });\n    const body = yield response.json();\n    const { company, user, token } = body;\n    if (user && token) {\n        dispatch(signedIn(token, user, company));\n    }\n    else {\n        dispatch(action(actions.signInFail));\n    }\n});\nexport const signedIn = (jwt, user, company, { redirect = true } = {}) => dispatch => {\n    dispatch(action(actions.signIn, { token: jwt, user, company }));\n    dispatch(getPages());\n    if (redirect) {\n        history.replace('/');\n    }\n};\nexport const signOut = () => dispatch => {\n    dispatch(actions.signOut);\n    history.replace('/sign-in');\n};\nexport const inviteUser = (email) => __awaiter(this, void 0, void 0, function* () {\n    const response = yield post(`/auth/invite`, { user: { email } });\n    console.log(response.status);\n    console.log(yield response.json());\n});\nexport const getInvite = token => (dispatch) => __awaiter(this, void 0, void 0, function* () {\n    dispatch(action(actions.inviteUpdate, { token }));\n    const response = yield get(`/auth/invite`, {\n        token,\n    });\n    const { user } = yield response.json();\n    if (user) {\n        dispatch(action(actions.inviteUpdate, { user }));\n    }\n    else {\n        dispatch(action(actions.inviteUpdate, { invalid: true }));\n    }\n});\nexport const inviteUserUpdated = user => dispatch => {\n    dispatch(action(actions.inviteUpdate, { user }));\n};\nexport const registerInvite = user => (dispatch, getState) => __awaiter(this, void 0, void 0, function* () {\n    dispatch(action(actions.inviteUpdate, { loading: true }));\n    const response = yield post(`/auth/register-invite`, {\n        token: getState().invite.token,\n        user,\n    });\n    const { company, user: registeredUser, token } = yield response.json();\n    dispatch(action(actions.inviteUpdate, { loading: false }));\n    if (registeredUser) {\n        dispatch(signedIn(token, registeredUser, company));\n    }\n});\nexport const registerUser = (company, user) => (dispatch) => __awaiter(this, void 0, void 0, function* () {\n    const response = yield post(`/auth/register`, { company, user });\n    const { company: registeredCompany, user: registeredUser, token } = yield response.json();\n    if (registeredUser) {\n        dispatch(signedIn(token, registeredUser, registeredCompany));\n    }\n});\nexport const updateUser = ({ company, user }) => (dispatch) => __awaiter(this, void 0, void 0, function* () {\n    dispatch(action(actions.updateUser, { loading: true }));\n    const response = yield post(`/user`, {\n        company: {\n            name: company.name,\n            contactEmail: company.contactEmail,\n            address: company.address,\n            phone: company.phone,\n        },\n        user: {\n            name: user.name,\n            email: user.email,\n            password: user.password,\n        },\n    });\n    if (response.status >= 400) {\n        throw new Error(yield response.text());\n    }\n    delete user.password;\n    dispatch(action(actions.updateUser, { company, user, loading: false }));\n});\n"]}