{"version":3,"sources":["../../src/web/lib/lib/action-creators/insights.js","web/lib/lib/action-creators/insights.js"],"names":["getPageInsights","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","objectId","state","getState","since","Math","round","period","from","until","to","jwt","user","token","dispatch","updateBucket","response","json","data","buckets","reduce","bucket","values","name","map","end_time","timestamp","Date","getTime","promotable_posts","sort","postA","postB","likes","summary","total_count","comments"],"mappings":"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","file":"insights.js","sourcesContent":["import fetch from 'isomorphic-fetch'\nimport {actions, action} from '../actions'\nimport {domain} from '../environment'\nimport {store} from '../store'\n\nexport function getPageInsights(objectId) {\n  const state = store.getState()\n  const since = Math.round(state.period.from / 1000)\n  const until = Math.round(state.period.to / 1000)\n  const jwt = store.getState().user.token\n\n  return async dispatch => {\n    dispatch(action(actions.updateBucket, []))\n    const response = await fetch(`${domain}/page-insights?token=${jwt}&objectId=${objectId}&since=${since}&until=${until}`)\n    const data = await response.json()\n\n    const buckets = data.reduce((buckets, bucket) => {\n      let {values = []} = bucket\n      if (bucket.name !== 'promotable_posts') {\n        values = values.map(({value, end_time, timestamp}) => ({\n          value,\n          timestamp: end_time\n            ? new Date(end_time).getTime()\n            : new Date(timestamp).getTime()\n        }))\n      }\n\n      buckets[bucket.name] = values\n      return buckets\n    }, {})\n\n    if (buckets.promotable_posts) {\n      buckets.promotable_posts.sort((postA, postB) =>\n          postB.likes.summary.total_count - postA.likes.summary.total_count ||\n          postB.comments.summary.total_count - postA.comments.summary.total_count\n      )\n    }\n\n    dispatch(action(actions.updateBucket, buckets))\n  }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport fetch from 'isomorphic-fetch';\nimport { actions, action } from '../actions';\nimport { domain } from '../environment';\nimport { store } from '../store';\nexport function getPageInsights(objectId) {\n    const state = store.getState();\n    const since = Math.round(state.period.from / 1000);\n    const until = Math.round(state.period.to / 1000);\n    const jwt = store.getState().user.token;\n    return (dispatch) => __awaiter(this, void 0, void 0, function* () {\n        dispatch(action(actions.updateBucket, []));\n        const response = yield fetch(`${domain}/page-insights?token=${jwt}&objectId=${objectId}&since=${since}&until=${until}`);\n        const data = yield response.json();\n        const buckets = data.reduce((buckets, bucket) => {\n            let { values = [] } = bucket;\n            if (bucket.name !== 'promotable_posts') {\n                values = values.map(({ value, end_time, timestamp }) => ({\n                    value,\n                    timestamp: end_time\n                        ? new Date(end_time).getTime()\n                        : new Date(timestamp).getTime()\n                }));\n            }\n            buckets[bucket.name] = values;\n            return buckets;\n        }, {});\n        if (buckets.promotable_posts) {\n            buckets.promotable_posts.sort((postA, postB) => postB.likes.summary.total_count - postA.likes.summary.total_count ||\n                postB.comments.summary.total_count - postA.comments.summary.total_count);\n        }\n        dispatch(action(actions.updateBucket, buckets));\n    });\n}\n"]}