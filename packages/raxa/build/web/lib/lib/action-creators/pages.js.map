{"version":3,"sources":["../../src/web/lib/lib/action-creators/pages.js","web/lib/lib/action-creators/pages.js"],"names":["getPages","getSelectablePages","setActive","updatePages","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","dispatch","response","json","pages","length","network","getState","selectablePages","_loading","loadingSelectabePages","updateSelectablePages","loadedSelectabePages","page","active","setSelectablePageActive","pageId","id","Object","entries","forEach","values","assign","status","Error","text"],"mappings":";;;;;;;;;;;;QAGMA,Q,GAAAA,Q;QASAC,kB,GAAAA,kB;QAcAC,S,GAAAA,S;QAIAC,W,GAAAA,W;;AA9BN;;AACA;;;;ACDA,IAAIC,YAAa,aAAQ,UAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,WAAO,KAAKD,MAAMA,IAAIE,OAAV,CAAL,EAAyB,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACvD,iBAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAE,gBAAI;AAAEC,qBAAKN,UAAUO,IAAV,CAAeF,KAAf,CAAL;AAA8B,aAApC,CAAqC,OAAOG,CAAP,EAAU;AAAEL,uBAAOK,CAAP;AAAY;AAAE;AAC3F,iBAASC,QAAT,CAAkBJ,KAAlB,EAAyB;AAAE,gBAAI;AAAEC,qBAAKN,UAAU,OAAV,EAAmBK,KAAnB,CAAL;AAAkC,aAAxC,CAAyC,OAAOG,CAAP,EAAU;AAAEL,uBAAOK,CAAP;AAAY;AAAE;AAC9F,iBAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,mBAAOC,IAAP,GAAcT,QAAQQ,OAAOL,KAAf,CAAd,GAAsC,IAAIN,CAAJ,CAAM,UAAUG,OAAV,EAAmB;AAAEA,wBAAQQ,OAAOL,KAAf;AAAwB,aAAnD,EAAqDO,IAArD,CAA0DR,SAA1D,EAAqEK,QAArE,CAAtC;AAAuH;AAC/IH,aAAK,CAACN,YAAYA,UAAUa,KAAV,CAAgBhB,OAAhB,EAAyBC,cAAc,EAAvC,CAAb,EAAyDS,IAAzD,EAAL;AACH,KALM,CAAP;AAMH,CAPD;ADGM,SAAAf,QAAA,GAAA;AAAA;;AACJ,WAAO,UAAOsB,QAAP;AAAA,eAAelB,iBAAA,KAAA,CAAA,EAAA,KAAA,CAAA,6BAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACG,wBADH;;AAAA;AACdmB,oCADc;AAAA;AAAA,mCAEEA,SAASC,IAAT,EAFF;;AAAA;AAAA;AAEbC,iCAFa,QAEbA,KAFa;;AAIpBA,kCAAMC,MAAN,IAAgBJ,SAAS,qBAAO,iBAAQnB,WAAf,EAA4BsB,KAA5B,CAAT,CAAhB;;AAJoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAA,EAAf;AAAA,KAAP;AAMD;AAEK,SAAAxB,kBAAA,CAA6B0B,OAA7B,EAAoC;AAAA;;AACxC,WAAO,UAAOL,QAAP,EAAiBM,QAAjB;AAAA,eAAyBxB,kBAAA,KAAA,CAAA,EAAA,KAAA,CAAA,6BAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAC1BwB,WAAWC,eAAX,CAA2BC,QAA3B,CAAoCH,OAApC,CAD0B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAG9BL,qCAAS,qBAAO,iBAAQS,qBAAf,EAAsCJ,OAAtC,CAAT;AAH8B;AAAA,mCAKP,2BAAcA,OAAd,CALO;;AAAA;AAKxBJ,oCALwB;AAAA;AAAA,mCAMVA,SAASC,IAAT,EANU;;AAAA;AAMxBC,iCANwB;;AAQ9BH,qCAAS,qBAAO,iBAAQU,qBAAf,EAAsC,EAACL,gBAAD,EAAUF,YAAV,EAAtC,CAAT;AACAH,qCAAS,qBAAO,iBAAQW,oBAAf,EAAqCN,OAArC,CAAT;;AAT8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAA,EAAzB;AAAA,KAAP;AAWD;AAEK,SAAAzB,SAAA,CAAoByB,OAApB,EAA6BO,IAA7B,EAAmCC,MAAnC,EAAyC;AAC7C,WAAO,qBAAO,iBAAQC,uBAAf,EAAwC,EAACT,gBAAD,EAAUU,QAAQH,KAAKI,EAAvB,EAA2BH,cAA3B,EAAxC,CAAP;AACD;AAEK,SAAAhC,WAAA,GAAA;AAAA;;AACJ,WAAO,UAAOmB,QAAP,EAAiBM,QAAjB;AAAA,eAAyBxB,kBAAA,KAAA,CAAA,EAAA,KAAA,CAAA,6BAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9BkB,qCAAS,qBAAO,iBAAQS,qBAAf,EAAsC,SAAtC,CAAT;AAEMN,iCAHwB,GAGhB,EAHgB;;AAK9Bc,mCAAOC,OAAP,CAAeZ,WAAWC,eAA1B,EAA2CY,OAA3C,CAAmD,iBAA2B;AAAA;AAAA,oCAAzBd,OAAyB;AAAA,oCAAhBE,eAAgB;;AAC5E,oCAAIF,YAAY,UAAhB,EAA4B,OAAO,KAAP;AAE5BY,uCAAOG,MAAP,CAAcb,eAAd,EAA+BY,OAA/B,CAAuC,gBAAI;AACzC,wCAAIP,KAAKC,MAAT,EAAiB;AACfV,8CAAMS,KAAKI,EAAX,IAAcC,OAAAI,MAAA,CAAA,EAAA,EAAOT,IAAP,EAAW,EAAEP,gBAAF,EAAX,CAAd;AACD;AACF,iCAJD;AAKD,6BARD;AAL8B;AAAA,mCAeP,0BAAe,EAACF,OAAOc,OAAOG,MAAP,CAAcjB,KAAd,CAAR,EAAf,CAfO;;AAAA;AAexBF,oCAfwB;;AAAA,kCAiB1BA,SAASqB,MAAT,IAAmB,GAjBO;AAAA;AAAA;AAAA;;AAAA,2CAkBlBC,KAlBkB;AAAA;AAAA,mCAkBNtB,SAASuB,IAAT,EAlBM;;AAAA;AAAA;AAAA;;AAAA;AAoB9BxB,qCAAS,qBAAO,iBAAQW,oBAAf,EAAqC,SAArC,CAAT;AACAX,qCAAS,qBAAO,iBAAQnB,WAAf,EAA4BoC,OAAOG,MAAP,CAAcjB,KAAd,CAA5B,CAAT;;AArB8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAA,EAAzB;AAAA,KAAP;AAuBD","file":"pages.js","sourcesContent":["import {actions, action} from '../actions'\nimport {get, post} from '../http'\n\nexport function getPages() {\n  return async (dispatch) => {\n    const response = await get(`/pages`)\n    const {pages} = await response.json()\n\n    pages.length && dispatch(action(actions.updatePages, pages))\n  }\n}\n\nexport function getSelectablePages(network) {\n  return async (dispatch, getState) => {\n    if (getState().selectablePages._loading[network]) return\n\n    dispatch(action(actions.loadingSelectabePages, network))\n\n    const response = await get(`/pages/${network}`)\n    const pages = await response.json()\n\n    dispatch(action(actions.updateSelectablePages, {network, pages}))\n    dispatch(action(actions.loadedSelectabePages, network))\n  }\n}\n\nexport function setActive(network, page, active) {\n  return action(actions.setSelectablePageActive, {network, pageId: page.id, active})\n}\n\nexport function updatePages() {\n  return async (dispatch, getState) => {\n    dispatch(action(actions.loadingSelectabePages, '_update'))\n\n    const pages = {}\n\n    Object.entries(getState().selectablePages).forEach(([network, selectablePages]) => {\n      if (network === '_loading') return false\n\n      Object.values(selectablePages).forEach(page => {\n        if (page.active) {\n          pages[page.id] = {...page, network}\n        }\n      })\n    })\n\n    const response = await post(`/pages`, {pages: Object.values(pages)})\n\n    if (response.status >= 400) {\n      throw new Error(await response.text())\n    }\n    dispatch(action(actions.loadedSelectabePages, '_update'))\n    dispatch(action(actions.updatePages, Object.values(pages)))\n  }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { actions, action } from '../actions';\nimport { get, post } from '../http';\nexport function getPages() {\n    return (dispatch) => __awaiter(this, void 0, void 0, function* () {\n        const response = yield get(`/pages`);\n        const { pages } = yield response.json();\n        pages.length && dispatch(action(actions.updatePages, pages));\n    });\n}\nexport function getSelectablePages(network) {\n    return (dispatch, getState) => __awaiter(this, void 0, void 0, function* () {\n        if (getState().selectablePages._loading[network])\n            return;\n        dispatch(action(actions.loadingSelectabePages, network));\n        const response = yield get(`/pages/${network}`);\n        const pages = yield response.json();\n        dispatch(action(actions.updateSelectablePages, { network, pages }));\n        dispatch(action(actions.loadedSelectabePages, network));\n    });\n}\nexport function setActive(network, page, active) {\n    return action(actions.setSelectablePageActive, { network, pageId: page.id, active });\n}\nexport function updatePages() {\n    return (dispatch, getState) => __awaiter(this, void 0, void 0, function* () {\n        dispatch(action(actions.loadingSelectabePages, '_update'));\n        const pages = {};\n        Object.entries(getState().selectablePages).forEach(([network, selectablePages]) => {\n            if (network === '_loading')\n                return false;\n            Object.values(selectablePages).forEach(page => {\n                if (page.active) {\n                    pages[page.id] = Object.assign({}, page, { network });\n                }\n            });\n        });\n        const response = yield post(`/pages`, { pages: Object.values(pages) });\n        if (response.status >= 400) {\n            throw new Error(yield response.text());\n        }\n        dispatch(action(actions.loadedSelectabePages, '_update'));\n        dispatch(action(actions.updatePages, Object.values(pages)));\n    });\n}\n"]}