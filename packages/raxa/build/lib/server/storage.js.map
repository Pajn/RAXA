{"version":3,"sources":["../../src/lib/server/storage.ts","lib/server/storage.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","deviceReducer","when","deviceAdded","state","device","Object","assign","id","deviceUpdated","build","deviceClassReducer","deviceClassAdded","deviceClass","deviceClassUpdated","interfaceReducer","interfaceAdded","iface","interfaceUpdated","pluginReducer","pluginAdded","plugin","pluginUpdated","statusReducer","statusUpdated","deviceId","interfaceId","statusId","StorageService","arguments","dispatch","a","payload","store","devices","deviceClasses","interfaces","plugins","status","getState","storage","filename","log","info","serviceManager","runningServices","PluginSupervisor","Date","now","toString","onDeviceCreated"],"mappings":"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","file":"storage.js","sourcesContent":["import nedb from 'nedb-persist'\nimport {Service, actions, defaultInterfaces, DeviceClass, Interface, PluginConfiguration, Device} from 'raxa-common'\nimport {DeviceState, DeviceClassState, InterfaceState, PluginState, State, StatusState} from 'raxa-common/lib/state'\nimport {createReducer, updateIn, Action, action} from 'redux-decorated'\nimport {Store, createStore, combineReducers} from 'redux'\nimport {persistStore, autoRehydrate} from 'redux-persist'\nimport {validateDeviceClass, validateInterface, validateDevice} from '../validations'\nimport {PluginSupervisor} from './plugin-supervisor'\n\nconst deviceReducer = createReducer<DeviceState>({})\n  .when(actions.deviceAdded, (state, {device}) => ({\n    ...state,\n    [device.id!]: device,\n  }))\n  .when(actions.deviceUpdated, (state, {device}) => ({\n    ...state,\n    [device.id!]: device,\n  }))\n  .build()\n\nconst deviceClassReducer = createReducer<DeviceClassState>({})\n  .when(actions.deviceClassAdded, (state, {deviceClass}) => ({\n    ...state,\n    [deviceClass.id!]: deviceClass,\n  }))\n  .when(actions.deviceClassUpdated, (state, {deviceClass}) => ({\n    ...state,\n    [deviceClass.id!]: deviceClass,\n  }))\n  .build()\n\nconst interfaceReducer = createReducer<InterfaceState>(defaultInterfaces)\n  .when(actions.interfaceAdded, (state, {iface}) => ({\n    ...state,\n    [iface.id!]: iface,\n  }))\n  .when(actions.interfaceUpdated, (state, {iface}) => ({\n    ...state,\n    [iface.id!]: iface,\n  }))\n  .build()\n\nconst pluginReducer = createReducer<PluginState>({})\n  .when(actions.pluginAdded, (state, {plugin}) => ({\n    ...state,\n    [plugin.id!]: plugin,\n  }))\n  .when(actions.pluginUpdated, (state, {plugin}) => ({\n    ...state,\n    [plugin.id!]: plugin,\n  }))\n  .build()\nconst statusReducer = createReducer<StatusState>({})\n  .when(actions.statusUpdated, (state, {deviceId, interfaceId, statusId, value}) =>\n    updateIn([deviceId, interfaceId, statusId] as any, value, state))\n  .build()\n\nexport class StorageService extends Service {\n  private store: Store<State>\n  public dispatch: <P>(action: Action<P>, payload: P) => void = (a, payload) => {\n    this.store.dispatch(action(a, payload))\n  }\n  public getState: () => State\n\n  async start() {\n    this.store = createStore<State>(\n      combineReducers<State>({\n        devices: deviceReducer,\n        deviceClasses: deviceClassReducer,\n        interfaces: interfaceReducer,\n        plugins: pluginReducer,\n        status: statusReducer,\n      }),\n      autoRehydrate<State>(),\n    )\n    this.getState = this.store.getState\n\n    await new Promise(resolve => {\n      persistStore(this.store, {storage: nedb({filename: 'db.json'}) as any}, resolve)\n    })\n  }\n\n  async stop() {\n  }\n\n  public installInterface(iface: Interface) {\n    this.log.info(`Installing interface ${iface.id}`)\n    const state = this.getState()\n    validateInterface(iface)\n    if (state.interfaces[iface.id]) {\n      this.dispatch(actions.interfaceUpdated, {iface})\n    } else {\n      this.dispatch(actions.interfaceAdded, {iface})\n    }\n  }\n\n  public installDeviceClass(deviceClass: DeviceClass) {\n    this.log.info(`Installing device class ${deviceClass.id}`)\n    const state = this.getState()\n    validateDeviceClass(state, deviceClass)\n    if (state.deviceClasses[deviceClass.id]) {\n      this.dispatch(actions.deviceClassUpdated, {deviceClass})\n    } else {\n      this.dispatch(actions.deviceClassAdded, {deviceClass})\n    }\n  }\n\n  public installPlugin(plugin: PluginConfiguration) {\n    this.log.info(`Installing plugin ${plugin.id}`)\n    const state = this.getState()\n    if (state.plugins[plugin.id]) {\n      this.dispatch(actions.pluginUpdated, {plugin})\n    } else {\n      this.dispatch(actions.pluginAdded, {plugin})\n    }\n  }\n\n  public async upsertDevice(device: Device): Promise<Device> {\n    const plugins = this.serviceManager.runningServices.PluginSupervisor as PluginSupervisor\n\n    this.log.info(`Upsert device ${device.id}`)\n    const state = this.getState()\n    device = validateDevice(state, device)\n\n    if (device.id) {\n      this.dispatch(actions.deviceUpdated, {device})\n    } else {\n      device.id = Date.now().toString()\n\n      device = (await plugins.onDeviceCreated(device)) || device\n\n      this.dispatch(actions.deviceAdded, {device})\n    }\n    return this.getState().devices[device.id]\n  }\n\n  public updateDevice(device: Device) {\n    this.log.info(`Update device ${device.id}`)\n    const state = this.getState()\n    if (state.plugins[device.id]) {\n      this.dispatch(actions.deviceUpdated, {device})\n    }\n  }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport nedb from 'nedb-persist';\nimport { Service, actions, defaultInterfaces } from 'raxa-common';\nimport { createReducer, updateIn, action } from 'redux-decorated';\nimport { createStore, combineReducers } from 'redux';\nimport { persistStore, autoRehydrate } from 'redux-persist';\nimport { validateDeviceClass, validateInterface, validateDevice } from '../validations';\nconst deviceReducer = createReducer({})\n    .when(actions.deviceAdded, (state, { device }) => (Object.assign({}, state, { [device.id]: device })))\n    .when(actions.deviceUpdated, (state, { device }) => (Object.assign({}, state, { [device.id]: device })))\n    .build();\nconst deviceClassReducer = createReducer({})\n    .when(actions.deviceClassAdded, (state, { deviceClass }) => (Object.assign({}, state, { [deviceClass.id]: deviceClass })))\n    .when(actions.deviceClassUpdated, (state, { deviceClass }) => (Object.assign({}, state, { [deviceClass.id]: deviceClass })))\n    .build();\nconst interfaceReducer = createReducer(defaultInterfaces)\n    .when(actions.interfaceAdded, (state, { iface }) => (Object.assign({}, state, { [iface.id]: iface })))\n    .when(actions.interfaceUpdated, (state, { iface }) => (Object.assign({}, state, { [iface.id]: iface })))\n    .build();\nconst pluginReducer = createReducer({})\n    .when(actions.pluginAdded, (state, { plugin }) => (Object.assign({}, state, { [plugin.id]: plugin })))\n    .when(actions.pluginUpdated, (state, { plugin }) => (Object.assign({}, state, { [plugin.id]: plugin })))\n    .build();\nconst statusReducer = createReducer({})\n    .when(actions.statusUpdated, (state, { deviceId, interfaceId, statusId, value }) => updateIn([deviceId, interfaceId, statusId], value, state))\n    .build();\nexport class StorageService extends Service {\n    constructor() {\n        super(...arguments);\n        this.dispatch = (a, payload) => {\n            this.store.dispatch(action(a, payload));\n        };\n    }\n    start() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.store = createStore(combineReducers({\n                devices: deviceReducer,\n                deviceClasses: deviceClassReducer,\n                interfaces: interfaceReducer,\n                plugins: pluginReducer,\n                status: statusReducer,\n            }), autoRehydrate());\n            this.getState = this.store.getState;\n            yield new Promise(resolve => {\n                persistStore(this.store, { storage: nedb({ filename: 'db.json' }) }, resolve);\n            });\n        });\n    }\n    stop() {\n        return __awaiter(this, void 0, void 0, function* () {\n        });\n    }\n    installInterface(iface) {\n        this.log.info(`Installing interface ${iface.id}`);\n        const state = this.getState();\n        validateInterface(iface);\n        if (state.interfaces[iface.id]) {\n            this.dispatch(actions.interfaceUpdated, { iface });\n        }\n        else {\n            this.dispatch(actions.interfaceAdded, { iface });\n        }\n    }\n    installDeviceClass(deviceClass) {\n        this.log.info(`Installing device class ${deviceClass.id}`);\n        const state = this.getState();\n        validateDeviceClass(state, deviceClass);\n        if (state.deviceClasses[deviceClass.id]) {\n            this.dispatch(actions.deviceClassUpdated, { deviceClass });\n        }\n        else {\n            this.dispatch(actions.deviceClassAdded, { deviceClass });\n        }\n    }\n    installPlugin(plugin) {\n        this.log.info(`Installing plugin ${plugin.id}`);\n        const state = this.getState();\n        if (state.plugins[plugin.id]) {\n            this.dispatch(actions.pluginUpdated, { plugin });\n        }\n        else {\n            this.dispatch(actions.pluginAdded, { plugin });\n        }\n    }\n    upsertDevice(device) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const plugins = this.serviceManager.runningServices.PluginSupervisor;\n            this.log.info(`Upsert device ${device.id}`);\n            const state = this.getState();\n            device = validateDevice(state, device);\n            if (device.id) {\n                this.dispatch(actions.deviceUpdated, { device });\n            }\n            else {\n                device.id = Date.now().toString();\n                device = (yield plugins.onDeviceCreated(device)) || device;\n                this.dispatch(actions.deviceAdded, { device });\n            }\n            return this.getState().devices[device.id];\n        });\n    }\n    updateDevice(device) {\n        this.log.info(`Update device ${device.id}`);\n        const state = this.getState();\n        if (state.plugins[device.id]) {\n            this.dispatch(actions.deviceUpdated, { device });\n        }\n    }\n}\n"]}