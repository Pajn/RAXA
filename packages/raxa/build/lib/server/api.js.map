{"version":3,"sources":["../../src/lib/server/api.ts","lib/server/api.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","register","server","options","err","ApiService","storage","serviceManager","runningServices","StorageService","plugins","PluginSupervisor","context","connection","port","path","graphqlOptions","schema","graphiqlOptions","endpointURL","start"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;ACHA,IAAIA,YAAa,aAAQ,UAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,WAAO,KAAKD,MAAMA,IAAIE,OAAV,CAAL,EAAyB,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACvD,iBAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAE,gBAAI;AAAEC,qBAAKN,UAAUO,IAAV,CAAeF,KAAf,CAAL;AAA8B,aAApC,CAAqC,OAAOG,CAAP,EAAU;AAAEL,uBAAOK,CAAP;AAAY;AAAE;AAC3F,iBAASC,QAAT,CAAkBJ,KAAlB,EAAyB;AAAE,gBAAI;AAAEC,qBAAKN,UAAU,OAAV,EAAmBK,KAAnB,CAAL;AAAkC,aAAxC,CAAyC,OAAOG,CAAP,EAAU;AAAEL,uBAAOK,CAAP;AAAY;AAAE;AAC9F,iBAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,mBAAOC,IAAP,GAAcT,QAAQQ,OAAOL,KAAf,CAAd,GAAsC,IAAIN,CAAJ,CAAM,UAAUG,OAAV,EAAmB;AAAEA,wBAAQQ,OAAOL,KAAf;AAAwB,aAAnD,EAAqDO,IAArD,CAA0DR,SAA1D,EAAqEK,QAArE,CAAtC;AAAuH;AAC/IH,aAAK,CAACN,YAAYA,UAAUa,KAAV,CAAgBhB,OAAhB,EAAyBC,cAAc,EAAvC,CAAb,EAAyDS,IAAzD,EAAL;AACH,KALM,CAAP;AAMH,CAPD;;ADQA,SAAAO,QAAA,CAAkBC,MAAlB,EAA0BC,OAA1B,EAAiC;AAC/B,WAAO,IAAIf,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;AACjCY,eAAOD,QAAP,CAAgBE,OAAhB,EAAyB,eAAG;AAC1B,gBAAIC,GAAJ,EAAS,OAAOd,OAAOc,GAAP,CAAP;AACTf;AACD,SAHD;AAID,KALM,CAAP;AAMD;;IAEKgB,U,WAAAA,U;;;;;;;;;;;gCACO;ACKL,mBAAOtB,UAAU,IAAV,EAAgB,KAAK,CAArB,EAAwB,KAAK,CAA7B,6BAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;ADJrCmB,sCCIqC,GDJ5B,kBCI4B;ADHrCI,uCCGqC,GDH3B,KAAKC,cAAL,CAAoBC,eAApB,CAAoCC,cCGT;ADFrCC,uCCEqC,GDF3B,KAAKH,cAAL,CAAoBC,eAApB,CAAoCG,gBCET;ADDrCC,uCCCqC,GDDlB,EAACN,gBAAD,EAAUI,gBAAV,ECCkB;;ADC3CR,uCAAOW,UAAP,CAAkB,EAACC,MAAM,IAAP,EAAlB;ACD2C;AAAA,uCDGrCb,SAASC,MAAT,EAAiB;AACrBD,4EADqB;AAErBE,6CAAS;AACPY,8CAAM,UADC;AAEPC,wDAAgB,EAACC,sBAAD,EAASL,gBAAT;AAFT;AAFY,iCAAjB,CCHqC;;AAAA;AAAA;AAAA,uCDWrCX,SAASC,MAAT,EAAiB;AACrBD,6EADqB;AAErBE,6CAAS;AACPY,8CAAM,WADC;AAEPG,yDAAiB;AACfC,yDAAa;AADE;AAFV;AAFY,iCAAjB,CCXqC;;AAAA;AAAA,iEDqBpC,IAAI/B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;AACjCY,2CAAOkB,KAAP,CAAa,eAAG;AACd,4CAAIhB,GAAJ,EAAS,OAAOd,OAAOc,GAAP,CAAP;AACTf,gDAAQa,MAAR;AACD,qCAHD;AAID,iCALM,CCrBoC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAhC,EAAP;AD2BL","file":"api.js","sourcesContent":["import {graphqlHapi, graphiqlHapi} from 'graphql-server-hapi'\nimport {Server} from 'hapi'\nimport {Service} from 'raxa-common'\nimport {schema} from '../graphql/schema'\nimport {StorageService} from './storage'\nimport {Context} from '../graphql/context'\nimport {PluginSupervisor} from './plugin-supervisor'\n\nfunction register(server, options) {\n  return new Promise((resolve, reject) => {\n    server.register(options, err => {\n      if (err) return reject(err)\n      resolve()\n    })\n  })\n}\n\nexport class ApiService extends Service {\n  async start() {\n    const server = new Server()\n    const storage = this.serviceManager.runningServices.StorageService as StorageService\n    const plugins = this.serviceManager.runningServices.PluginSupervisor as PluginSupervisor\n    const context: Context = {storage, plugins}\n\n    server.connection({port: 9000})\n\n    await register(server, {\n      register: graphqlHapi,\n      options: {\n        path: '/graphql',\n        graphqlOptions: {schema, context},\n      },\n    })\n\n    await register(server, {\n      register: graphiqlHapi,\n      options: {\n        path: '/graphiql',\n        graphiqlOptions: {\n          endpointURL: '/graphql',\n        },\n      },\n    })\n\n    return new Promise((resolve, reject) => {\n      server.start(err => {\n        if (err) return reject(err)\n        resolve(server)\n      })\n    })\n  }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { graphqlHapi, graphiqlHapi } from 'graphql-server-hapi';\nimport { Server } from 'hapi';\nimport { Service } from 'raxa-common';\nimport { schema } from '../graphql/schema';\nfunction register(server, options) {\n    return new Promise((resolve, reject) => {\n        server.register(options, err => {\n            if (err)\n                return reject(err);\n            resolve();\n        });\n    });\n}\nexport class ApiService extends Service {\n    start() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const server = new Server();\n            const storage = this.serviceManager.runningServices.StorageService;\n            const plugins = this.serviceManager.runningServices.PluginSupervisor;\n            const context = { storage, plugins };\n            server.connection({ port: 9000 });\n            yield register(server, {\n                register: graphqlHapi,\n                options: {\n                    path: '/graphql',\n                    graphqlOptions: { schema, context },\n                },\n            });\n            yield register(server, {\n                register: graphiqlHapi,\n                options: {\n                    path: '/graphiql',\n                    graphiqlOptions: {\n                        endpointURL: '/graphql',\n                    },\n                },\n            });\n            return new Promise((resolve, reject) => {\n                server.start(err => {\n                    if (err)\n                        return reject(err);\n                    resolve(server);\n                });\n            });\n        });\n    }\n}\n"]}