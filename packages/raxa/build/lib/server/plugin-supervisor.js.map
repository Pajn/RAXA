{"version":3,"sources":["../../src/lib/server/plugin-supervisor.ts","lib/server/plugin-supervisor.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","PluginManager","service","plugin","upsertDevice","device","storage","supervisor","serviceManager","runningServices","StorageService","setDeviceStatus","modification","callDevice","call","PluginSupervisor","arguments","runningPlugins","pluginServiceManager","log","all","filter","getState","plugins","map","installPlugin","Object","values","enabled","startPlugin","id","stop","name","info","pluginDefinition","require","default","warn","entries","interfaces","forEach","iface","pluginId","installInterface","deviceClasses","deviceClass","installDeviceClass","startService","pluginInstance","type","getPlugin","onDeviceCreated","onDeviceCalled","onDeviceStatusModified","state","devices","deviceId","interfaceId","status","statusId","updatedDevice","updateDevice","methods","method"],"mappings":"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","file":"plugin-supervisor.js","sourcesContent":["import {Awaitable, ServiceManager, Plugin, Service, Device, raxaError, Call, Modification, PluginDefinition} from 'raxa-common'\nimport {ServiceImplementation} from 'raxa-common/lib/service'\nimport {StorageService} from './storage'\nimport {validateAction} from '../validations'\n\nclass PluginManager extends ServiceManager {\n  supervisor: PluginSupervisor\n\n  configureService(service: ServiceImplementation, plugin: Plugin) {\n    super.configureService(service, plugin)\n    plugin.upsertDevice = (device: Device) => {\n      const storage = this.supervisor.serviceManager.runningServices.StorageService as StorageService\n      return storage.upsertDevice(device)\n    }\n    plugin.setDeviceStatus = (modification: Modification) => this.supervisor.setDeviceStatus(modification)\n    plugin.callDevice = (call: Call) => this.supervisor.callDevice(call)\n  }\n}\n\nexport class PluginSupervisor extends Service {\n  private runningPlugins: {[name: string]: Plugin} = {}\n  private pluginServiceManager: PluginManager\n\n  async start() {\n    this.pluginServiceManager = new PluginManager(this.log)\n    this.pluginServiceManager.supervisor = this\n    this.pluginServiceManager.runningServices.StorageService =\n      this.serviceManager.runningServices.StorageService\n\n    const storage = this.serviceManager.runningServices.StorageService as StorageService\n    await Promise.all(\n      ['mysensors']\n        .filter(plugin => !storage.getState().plugins[plugin])\n        .map(plugin => this.installPlugin(plugin))\n    )\n\n    await Promise.all(\n      Object.values(storage.getState().plugins)\n        .filter(plugin => plugin.enabled)\n        .map(plugin => this.startPlugin(plugin.id))\n    )\n  }\n\n  async stop() {\n    for (const plugin of Object.values(this.runningPlugins)) {\n      await plugin.stop()\n    }\n  }\n\n  private async installPlugin(name: string) {\n    const storage = this.serviceManager.runningServices.StorageService as StorageService\n\n    this.log.info(`Installing plugin ${name}`)\n    const pluginDefinition = require(`raxa-plugin-${name}/plugin.json`) as PluginDefinition\n    let plugin = require(`raxa-plugin-${name}`)\n    if (plugin.default) {\n      plugin = plugin.default\n    }\n\n    if (typeof plugin !== 'function') {\n      this.log.warn(`Plugin ${name} has no default exported class`)\n      return\n    }\n\n    Object.entries(pluginDefinition.interfaces).forEach(([id, iface]) => {\n      if (id !== iface.id) throw `Invalid interface id ${id} !== ${iface.id}`\n      iface.pluginId = name\n      storage.installInterface(iface)\n    })\n\n    Object.entries(pluginDefinition.deviceClasses).forEach(([id, deviceClass]) => {\n      if (id !== deviceClass.id) throw `Invalid device class id ${id} !== ${deviceClass.id}`\n      deviceClass.pluginId = name\n      storage.installDeviceClass(deviceClass)\n    })\n\n    storage.installPlugin({id: name, enabled: true})\n  }\n\n  private async startPlugin(name: string) {\n    this.log.info(`Starting plugin ${name}`)\n    let plugin = require(`raxa-plugin-${name}`)\n    if (plugin.default) {\n      plugin = plugin.default\n    }\n\n    const pluginInstance = await this.pluginServiceManager.startService(plugin)\n    this.runningPlugins[name] = pluginInstance as Plugin\n  }\n\n  private getPlugin(id: string) {\n    const plugin = this.runningPlugins[id]\n    if (!plugin) {\n      throw raxaError({type: 'pluginNotEnabled', pluginId: id})\n    }\n    return plugin\n  }\n\n  public onDeviceCreated(device: Device): Awaitable<void|Device> {\n    return this.getPlugin(device.pluginId).onDeviceCreated(device)\n  }\n  public onDeviceCalled(call: Call, device: Device): Awaitable<void|Device> {\n    return this.getPlugin(device.pluginId).onDeviceCalled(call, device)\n  }\n  public onDeviceStatusModified(modification: Modification, device: Device): Awaitable<void|Device> {\n    return this.getPlugin(device.pluginId).onDeviceStatusModified(modification, device)\n  }\n\n  public async setDeviceStatus(modification: Modification) {\n    const storage = this.serviceManager.runningServices.StorageService as StorageService\n    const state = storage.getState()\n    validateAction(state, modification)\n    const device = state.devices[modification.deviceId]\n    const iface = state.interfaces[modification.interfaceId]\n    if (!iface.status || !iface.status[modification.statusId]) {\n      throw raxaError({\n        type: 'missingStatus',\n        interfaceId: modification.interfaceId,\n        statusId: modification.statusId,\n      })\n    }\n    //todo: validate status value\n    const updatedDevice = await this.getPlugin(device.pluginId)\n      .onDeviceStatusModified(modification, device)\n    if (updatedDevice) {\n      storage.updateDevice(device)\n    }\n  }\n\n  public async callDevice(call: Call) {\n    const storage = this.serviceManager.runningServices.StorageService as StorageService\n    const state = storage.getState()\n    validateAction(state, call)\n    const device = state.devices[call.deviceId]\n    const iface = state.interfaces[call.interfaceId]\n    if (!iface.methods || !iface.methods[call.method]) {\n      throw raxaError({type: 'missingMethod', interfaceId: call.interfaceId, method: call.method})\n    }\n    //todo: validate arguments\n    const updatedDevice = await this.getPlugin(device.pluginId).onDeviceCalled(call, device)\n    if (updatedDevice) {\n      storage.updateDevice(device)\n    }\n  }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ServiceManager, Service, raxaError } from 'raxa-common';\nimport { validateAction } from '../validations';\nclass PluginManager extends ServiceManager {\n    configureService(service, plugin) {\n        super.configureService(service, plugin);\n        plugin.upsertDevice = (device) => {\n            const storage = this.supervisor.serviceManager.runningServices.StorageService;\n            return storage.upsertDevice(device);\n        };\n        plugin.setDeviceStatus = (modification) => this.supervisor.setDeviceStatus(modification);\n        plugin.callDevice = (call) => this.supervisor.callDevice(call);\n    }\n}\nexport class PluginSupervisor extends Service {\n    constructor() {\n        super(...arguments);\n        this.runningPlugins = {};\n    }\n    start() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.pluginServiceManager = new PluginManager(this.log);\n            this.pluginServiceManager.supervisor = this;\n            this.pluginServiceManager.runningServices.StorageService =\n                this.serviceManager.runningServices.StorageService;\n            const storage = this.serviceManager.runningServices.StorageService;\n            yield Promise.all(['mysensors']\n                .filter(plugin => !storage.getState().plugins[plugin])\n                .map(plugin => this.installPlugin(plugin)));\n            yield Promise.all(Object.values(storage.getState().plugins)\n                .filter(plugin => plugin.enabled)\n                .map(plugin => this.startPlugin(plugin.id)));\n        });\n    }\n    stop() {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (const plugin of Object.values(this.runningPlugins)) {\n                yield plugin.stop();\n            }\n        });\n    }\n    installPlugin(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const storage = this.serviceManager.runningServices.StorageService;\n            this.log.info(`Installing plugin ${name}`);\n            const pluginDefinition = require(`raxa-plugin-${name}/plugin.json`);\n            let plugin = require(`raxa-plugin-${name}`);\n            if (plugin.default) {\n                plugin = plugin.default;\n            }\n            if (typeof plugin !== 'function') {\n                this.log.warn(`Plugin ${name} has no default exported class`);\n                return;\n            }\n            Object.entries(pluginDefinition.interfaces).forEach(([id, iface]) => {\n                if (id !== iface.id)\n                    throw `Invalid interface id ${id} !== ${iface.id}`;\n                iface.pluginId = name;\n                storage.installInterface(iface);\n            });\n            Object.entries(pluginDefinition.deviceClasses).forEach(([id, deviceClass]) => {\n                if (id !== deviceClass.id)\n                    throw `Invalid device class id ${id} !== ${deviceClass.id}`;\n                deviceClass.pluginId = name;\n                storage.installDeviceClass(deviceClass);\n            });\n            storage.installPlugin({ id: name, enabled: true });\n        });\n    }\n    startPlugin(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.log.info(`Starting plugin ${name}`);\n            let plugin = require(`raxa-plugin-${name}`);\n            if (plugin.default) {\n                plugin = plugin.default;\n            }\n            const pluginInstance = yield this.pluginServiceManager.startService(plugin);\n            this.runningPlugins[name] = pluginInstance;\n        });\n    }\n    getPlugin(id) {\n        const plugin = this.runningPlugins[id];\n        if (!plugin) {\n            throw raxaError({ type: 'pluginNotEnabled', pluginId: id });\n        }\n        return plugin;\n    }\n    onDeviceCreated(device) {\n        return this.getPlugin(device.pluginId).onDeviceCreated(device);\n    }\n    onDeviceCalled(call, device) {\n        return this.getPlugin(device.pluginId).onDeviceCalled(call, device);\n    }\n    onDeviceStatusModified(modification, device) {\n        return this.getPlugin(device.pluginId).onDeviceStatusModified(modification, device);\n    }\n    setDeviceStatus(modification) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const storage = this.serviceManager.runningServices.StorageService;\n            const state = storage.getState();\n            validateAction(state, modification);\n            const device = state.devices[modification.deviceId];\n            const iface = state.interfaces[modification.interfaceId];\n            if (!iface.status || !iface.status[modification.statusId]) {\n                throw raxaError({\n                    type: 'missingStatus',\n                    interfaceId: modification.interfaceId,\n                    statusId: modification.statusId,\n                });\n            }\n            //todo: validate status value\n            const updatedDevice = yield this.getPlugin(device.pluginId)\n                .onDeviceStatusModified(modification, device);\n            if (updatedDevice) {\n                storage.updateDevice(device);\n            }\n        });\n    }\n    callDevice(call) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const storage = this.serviceManager.runningServices.StorageService;\n            const state = storage.getState();\n            validateAction(state, call);\n            const device = state.devices[call.deviceId];\n            const iface = state.interfaces[call.interfaceId];\n            if (!iface.methods || !iface.methods[call.method]) {\n                throw raxaError({ type: 'missingMethod', interfaceId: call.interfaceId, method: call.method });\n            }\n            //todo: validate arguments\n            const updatedDevice = yield this.getPlugin(device.pluginId).onDeviceCalled(call, device);\n            if (updatedDevice) {\n                storage.updateDevice(device);\n            }\n        });\n    }\n}\n"]}