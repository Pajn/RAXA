{"version":3,"sources":["../../src/lib/graphql/device.ts","lib/graphql/device.js"],"names":["joi","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","DeviceType","name","fields","id","type","pluginId","deviceClassId","config","interfaces","readRules","writeRules","deviceQueries","devices","validate","object","_","storage","Object","values","getState","deviceMutations","upsertDevice","device","string","optional","required","args","callDevice","deviceId","interfaceId","method","arguments","call","plugins","setDeviceStatus","statusId","modification"],"mappings":"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","file":"device.js","sourcesContent":["import {GraphQLString} from 'graphql'\nimport GraphQLJSON from 'graphql-type-json'\nimport {buildQueries, buildMutations, buildType} from 'graphql-verified'\nimport * as joi from 'joi'\nimport {Device, Call} from 'raxa-common'\nimport {Context} from './context'\nimport {Modification} from '../../../../common/lib/entities'\n\nexport const DeviceType = buildType<Device>({\n  name: 'Device',\n  fields: {\n    id: {type: GraphQLString},\n    name: {type: GraphQLString},\n    pluginId: {type: GraphQLString},\n    deviceClassId: {type: GraphQLString},\n    config: {type: GraphQLJSON},\n    interfaces: {type: [GraphQLString]},\n    // variables?: {\n    //     [interfaceId: string]: {\n    //         [variableName: string]: any;\n    //     };\n    // };\n  } as any,\n  readRules: false,\n  writeRules: false,\n})\n\nexport const deviceQueries = buildQueries({\n  devices: {\n    type: [DeviceType],\n    validate: joi.object({}),\n    resolve(_, {}, {storage}: Context) {\n      return Object.values(storage.getState().devices)\n    },\n  },\n})\n\nexport const deviceMutations = buildMutations({\n  upsertDevice: {\n    type: DeviceType,\n    validate: joi.object({\n      device: joi.object({\n        id: joi.string().optional(),\n        name: joi.string().required(),\n        pluginId: joi.string().required(),\n        deviceClassId: joi.string().required(),\n        config: joi.object(),\n      }),\n    }),\n    args: {\n      device: {type: DeviceType},\n    },\n    writeRules: false,\n    async resolve(_, {device}: {device: Device}, {storage}: Context) {\n      storage.upsertDevice(device)\n    },\n  },\n  callDevice: {\n    type: DeviceType,\n    validate: joi.object({\n      deviceId: joi.string(),\n      interfaceId: joi.string(),\n      method: joi.string(),\n      arguments: joi.string(),\n    }),\n    writeRules: false,\n    async resolve(_, call: Call, {plugins}: Context) {\n      plugins.callDevice(call)\n    },\n  },\n  setDeviceStatus: {\n    type: DeviceType,\n    validate: joi.object({\n      deviceId: joi.string(),\n      interfaceId: joi.string(),\n      statusId: joi.string(),\n      value: joi.string(),\n    }),\n    writeRules: false,\n    async resolve(_, modification: Modification, {plugins}: Context) {\n      plugins.setDeviceStatus(modification)\n    },\n  },\n})\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GraphQLString } from 'graphql';\nimport GraphQLJSON from 'graphql-type-json';\nimport { buildQueries, buildMutations, buildType } from 'graphql-verified';\nimport * as joi from 'joi';\nexport const DeviceType = buildType({\n    name: 'Device',\n    fields: {\n        id: { type: GraphQLString },\n        name: { type: GraphQLString },\n        pluginId: { type: GraphQLString },\n        deviceClassId: { type: GraphQLString },\n        config: { type: GraphQLJSON },\n        interfaces: { type: [GraphQLString] },\n    },\n    readRules: false,\n    writeRules: false,\n});\nexport const deviceQueries = buildQueries({\n    devices: {\n        type: [DeviceType],\n        validate: joi.object({}),\n        resolve(_, {}, { storage }) {\n            return Object.values(storage.getState().devices);\n        },\n    },\n});\nexport const deviceMutations = buildMutations({\n    upsertDevice: {\n        type: DeviceType,\n        validate: joi.object({\n            device: joi.object({\n                id: joi.string().optional(),\n                name: joi.string().required(),\n                pluginId: joi.string().required(),\n                deviceClassId: joi.string().required(),\n                config: joi.object(),\n            }),\n        }),\n        args: {\n            device: { type: DeviceType },\n        },\n        writeRules: false,\n        resolve(_, { device }, { storage }) {\n            return __awaiter(this, void 0, void 0, function* () {\n                storage.upsertDevice(device);\n            });\n        },\n    },\n    callDevice: {\n        type: DeviceType,\n        validate: joi.object({\n            deviceId: joi.string(),\n            interfaceId: joi.string(),\n            method: joi.string(),\n            arguments: joi.string(),\n        }),\n        writeRules: false,\n        resolve(_, call, { plugins }) {\n            return __awaiter(this, void 0, void 0, function* () {\n                plugins.callDevice(call);\n            });\n        },\n    },\n    setDeviceStatus: {\n        type: DeviceType,\n        validate: joi.object({\n            deviceId: joi.string(),\n            interfaceId: joi.string(),\n            statusId: joi.string(),\n            value: joi.string(),\n        }),\n        writeRules: false,\n        resolve(_, modification, { plugins }) {\n            return __awaiter(this, void 0, void 0, function* () {\n                plugins.setDeviceStatus(modification);\n            });\n        },\n    },\n});\n"]}